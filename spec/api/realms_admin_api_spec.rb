=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for KeycloakRest::RealmsAdminApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RealmsAdminApi' do
  before do
    # run before each test
    @api_instance = KeycloakRest::RealmsAdminApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RealmsAdminApi' do
    it 'should create an instance of RealmsAdminApi' do
      expect(@api_instance).to be_instance_of(KeycloakRest::RealmsAdminApi)
    end
  end

  # unit tests for realm_admin_events_delete
  # Delete all admin events
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_admin_events_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_admin_events_get
  # Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :auth_client 
  # @option opts [String] :auth_ip_address 
  # @option opts [String] :auth_realm 
  # @option opts [String] :auth_user user id
  # @option opts [String] :date_from 
  # @option opts [String] :date_to 
  # @option opts [Integer] :first 
  # @option opts [Integer] :max Maximum results size (defaults to 100)
  # @option opts [Array<String>] :operation_types 
  # @option opts [String] :resource_path 
  # @option opts [Array<String>] :resource_types 
  # @return [Array<AdminEventRepresentation>]
  describe 'realm_admin_events_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clear_keys_cache_post
  # Clear cache of external public keys (Public keys of clients or Identity providers)
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clear_keys_cache_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clear_realm_cache_post
  # Clear realm cache
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clear_realm_cache_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clear_user_cache_post
  # Clear user cache
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clear_user_cache_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_client_description_converter_post
  # Base path for importing clients under this realm.
  # @param realm realm name (not id!)
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [ClientRepresentation]
  describe 'realm_client_description_converter_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_client_session_stats_get
  # Get client session stats   Returns a JSON map.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<Hash<String, Object>>]
  describe 'realm_client_session_stats_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_credential_registrators_get
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<String>]
  describe 'realm_credential_registrators_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_default_client_scopes_client_scope_id_delete
  # @param realm realm name (not id!)
  # @param client_scope_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_default_client_scopes_client_scope_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_default_client_scopes_client_scope_id_put
  # @param realm realm name (not id!)
  # @param client_scope_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_default_client_scopes_client_scope_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_default_client_scopes_get
  # Get realm default client scopes.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<ClientScopeRepresentation>]
  describe 'realm_default_default_client_scopes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_groups_get
  # Get group hierarchy.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<GroupRepresentation>]
  describe 'realm_default_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_groups_group_id_delete
  # @param realm realm name (not id!)
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_groups_group_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_groups_group_id_put
  # @param realm realm name (not id!)
  # @param group_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_groups_group_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_optional_client_scopes_client_scope_id_delete
  # @param realm realm name (not id!)
  # @param client_scope_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_optional_client_scopes_client_scope_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_optional_client_scopes_client_scope_id_put
  # @param realm realm name (not id!)
  # @param client_scope_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_default_optional_client_scopes_client_scope_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_default_optional_client_scopes_get
  # Get realm optional client scopes.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<ClientScopeRepresentation>]
  describe 'realm_default_optional_client_scopes_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_delete
  # Delete the realm
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_events_config_get
  # Get the events provider configuration   Returns JSON object with events provider configuration
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [RealmEventsConfigRepresentation]
  describe 'realm_events_config_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_events_config_put
  # Update the events provider   Change the events provider and/or its configuration
  # @param realm realm name (not id!)
  # @param realm_events_config_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_events_config_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_events_delete
  # Delete all events
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_events_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_events_get
  # Get events   Returns all events, or filters them based on URL query parameters listed here
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :client App or oauth client name
  # @option opts [String] :date_from From date
  # @option opts [String] :date_to To date
  # @option opts [Integer] :first Paging offset
  # @option opts [String] :ip_address IP address
  # @option opts [Integer] :max Maximum results size (defaults to 100)
  # @option opts [Array<String>] :type The types of events to return
  # @option opts [String] :user User id
  # @return [Array<EventRepresentation>]
  describe 'realm_events_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_get
  # Get the top-level representation of the realm   It will not include nested information like User and Client representations.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [RealmRepresentation]
  describe 'realm_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_group_by_path_path_get
  # @param realm realm name (not id!)
  # @param path 
  # @param [Hash] opts the optional parameters
  # @return [GroupRepresentation]
  describe 'realm_group_by_path_path_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_ldap_server_capabilities_post
  # Get LDAP supported extensions.
  # @param realm realm name (not id!)
  # @param test_ldap_connection_representation LDAP configuration
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_ldap_server_capabilities_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_logout_all_post
  # Removes all user sessions.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_logout_all_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_partial_export_post
  # Partial export of existing realm into a JSON file.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :export_clients 
  # @option opts [Boolean] :export_groups_and_roles 
  # @return [RealmRepresentation]
  describe 'realm_partial_export_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_partial_import_post
  # Partial import from a JSON file to an existing realm.
  # @param realm realm name (not id!)
  # @param partial_import_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_partial_import_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_push_revocation_post
  # Push the realm’s revocation policy to any client that has an admin url associated with it.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_push_revocation_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_put
  # Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
  # @param realm realm name (not id!)
  # @param realm_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_sessions_session_delete
  # Remove a specific user session.
  # @param realm realm name (not id!)
  # @param session 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_sessions_session_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_test_ldap_connection_post
  # Test LDAP connection
  # @param realm realm name (not id!)
  # @param test_ldap_connection_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_test_ldap_connection_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_test_smtp_connection_post
  # @param realm realm name (not id!)
  # @param request_body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_test_smtp_connection_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_users_management_permissions_get
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_users_management_permissions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_users_management_permissions_put
  # @param realm realm name (not id!)
  # @param management_permission_reference 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_users_management_permissions_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for root_post
  # Import a realm   Imports a realm from a full representation of that realm.
  # @param realm_representation JSON representation of the realm
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'root_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
