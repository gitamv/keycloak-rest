=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for KeycloakRest::RolesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RolesApi' do
  before do
    # run before each test
    @api_instance = KeycloakRest::RolesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RolesApi' do
    it 'should create an instance of RolesApi' do
      expect(@api_instance).to be_instance_of(KeycloakRest::RolesApi)
    end
  end

  # unit tests for realm_clients_id_roles_get
  # Get all roles for the realm or client
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation 
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @option opts [String] :search 
  # @return [Object]
  describe 'realm_clients_id_roles_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_post
  # Create a new role for the realm or client
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clients_id_roles_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_composites_clients_client_uuid_get
  # Get client-level roles for the client that are in the role’s composite
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param client_uuid 
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_clients_id_roles_role_name_composites_clients_client_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_composites_delete
  # Remove roles from the role’s composite
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param role_representation roles to remove
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clients_id_roles_role_name_composites_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_composites_get
  # Get composites of the role
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_clients_id_roles_role_name_composites_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_composites_post
  # Add a composite to the role
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clients_id_roles_role_name_composites_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_composites_realm_get
  # Get realm-level roles of the role’s composite
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_clients_id_roles_role_name_composites_realm_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_delete
  # Delete a role by name
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clients_id_roles_role_name_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_get
  # Get a role by name
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [RoleRepresentation]
  describe 'realm_clients_id_roles_role_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_groups_get
  # Return List of Groups that have the specified role name
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @return [Array<GroupRepresentation>]
  describe 'realm_clients_id_roles_role_name_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_management_permissions_get
  # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_clients_id_roles_role_name_management_permissions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_management_permissions_put
  # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name 
  # @param management_permission_reference 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_clients_id_roles_role_name_management_permissions_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_put
  # Update a role by name
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name role’s name (not id!)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_clients_id_roles_role_name_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_clients_id_roles_role_name_users_get
  # Return List of Users that have the specified role name
  # @param realm realm name (not id!)
  # @param id id of client (not client-id)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @return [Array<UserRepresentation>]
  describe 'realm_clients_id_roles_role_name_users_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_get
  # Get all roles for the realm or client
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation 
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @option opts [String] :search 
  # @return [Object]
  describe 'realm_roles_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_post
  # Create a new role for the realm or client
  # @param realm realm name (not id!)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_roles_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_composites_clients_client_uuid_get
  # Get client-level roles for the client that are in the role’s composite
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param client_uuid 
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_roles_role_name_composites_clients_client_uuid_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_composites_delete
  # Remove roles from the role’s composite
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param role_representation roles to remove
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_roles_role_name_composites_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_composites_get
  # Get composites of the role
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_roles_role_name_composites_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_composites_post
  # Add a composite to the role
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_roles_role_name_composites_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_composites_realm_get
  # Get realm-level roles of the role’s composite
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [Array<RoleRepresentation>]
  describe 'realm_roles_role_name_composites_realm_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_delete
  # Delete a role by name
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_roles_role_name_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_get
  # Get a role by name
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param [Hash] opts the optional parameters
  # @return [RoleRepresentation]
  describe 'realm_roles_role_name_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_groups_get
  # Return List of Groups that have the specified role name
  # @param realm realm name (not id!)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @return [Array<GroupRepresentation>]
  describe 'realm_roles_role_name_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_management_permissions_get
  # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_roles_role_name_management_permissions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_management_permissions_put
  # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param role_name 
  # @param management_permission_reference 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_roles_role_name_management_permissions_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_put
  # Update a role by name
  # @param realm realm name (not id!)
  # @param role_name role’s name (not id!)
  # @param role_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_roles_role_name_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_roles_role_name_users_get
  # Return List of Users that have the specified role name
  # @param realm realm name (not id!)
  # @param role_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @return [Array<UserRepresentation>]
  describe 'realm_roles_role_name_users_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
