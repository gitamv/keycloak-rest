=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for KeycloakRest::GroupsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'GroupsApi' do
  before do
    # run before each test
    @api_instance = KeycloakRest::GroupsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupsApi' do
    it 'should create an instance of GroupsApi' do
      expect(@api_instance).to be_instance_of(KeycloakRest::GroupsApi)
    end
  end

  # unit tests for realm_groups_count_get
  # Returns the groups counts.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :search 
  # @option opts [Boolean] :top 
  # @return [Hash<String, Object>]
  describe 'realm_groups_count_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_get
  # Get group hierarchy.
  # @param realm realm name (not id!)
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation 
  # @option opts [Integer] :first 
  # @option opts [Integer] :max 
  # @option opts [String] :search 
  # @return [Array<GroupRepresentation>]
  describe 'realm_groups_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_children_post
  # Set or create child.
  # @param realm realm name (not id!)
  # @param id 
  # @param group_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_groups_id_children_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_delete
  # @param realm realm name (not id!)
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_groups_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_get
  # @param realm realm name (not id!)
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [GroupRepresentation]
  describe 'realm_groups_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_management_permissions_get
  # Return object stating whether client Authorization permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_groups_id_management_permissions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_management_permissions_put
  # Return object stating whether client Authorization permissions have been initialized or not and a reference
  # @param realm realm name (not id!)
  # @param id 
  # @param management_permission_reference 
  # @param [Hash] opts the optional parameters
  # @return [ManagementPermissionReference]
  describe 'realm_groups_id_management_permissions_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_members_get
  # Get users   Returns a list of users, filtered according to query parameters
  # @param realm realm name (not id!)
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :brief_representation Only return basic information (only guaranteed to return id, username, created, first and last name,  email, enabled state, email verification state, federation link, and access.  Note that it means that namely user attributes, required actions, and not before are not returned.)
  # @option opts [Integer] :first Pagination offset
  # @option opts [Integer] :max Maximum results size (defaults to 100)
  # @return [Array<UserRepresentation>]
  describe 'realm_groups_id_members_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_id_put
  # Update group, ignores subgroups.
  # @param realm realm name (not id!)
  # @param id 
  # @param group_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_groups_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for realm_groups_post
  # create or add a top level realm groupSet or create child.
  # @param realm realm name (not id!)
  # @param group_representation 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'realm_groups_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
