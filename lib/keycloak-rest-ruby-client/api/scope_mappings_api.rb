=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class ScopeMappingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_clients_client_available_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_clients_client_available_get_with_http_info(realm, id, client, opts)
      data
    end

    # The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_clients_client_available_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_available_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_available_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_available_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_available_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_clients_client_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_clients_client_composite_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_clients_client_composite_get_with_http_info(realm, id, client, opts)
      data
    end

    # Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_clients_client_composite_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_composite_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_composite_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_composite_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_composite_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_clients_client_composite_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove client-level roles from the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_scope_mappings_clients_client_delete(realm, id, client, role_representation, opts = {})
      realm_client_scopes_id_scope_mappings_clients_client_delete_with_http_info(realm, id, client, role_representation, opts)
      nil
    end

    # Remove client-level roles from the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_scope_mappings_clients_client_delete_with_http_info(realm, id, client, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_delete"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_clients_client_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the roles associated with a client’s scope   Returns roles for the client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_clients_client_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_clients_client_get_with_http_info(realm, id, client, opts)
      data
    end

    # Get the roles associated with a client’s scope   Returns roles for the client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_clients_client_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_clients_client_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add client-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_scope_mappings_clients_client_post(realm, id, client, role_representation, opts = {})
      realm_client_scopes_id_scope_mappings_clients_client_post_with_http_info(realm, id, client, role_representation, opts)
      nil
    end

    # Add client-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_scope_mappings_clients_client_post_with_http_info(realm, id, client, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_clients_client_post"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_clients_client_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all scope mappings for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [MappingsRepresentation]
    def realm_client_scopes_id_scope_mappings_get(realm, id, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_get_with_http_info(realm, id, opts)
      data
    end

    # Get all scope mappings for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MappingsRepresentation, Integer, Hash)>] MappingsRepresentation data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MappingsRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles that are available to attach to this client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_realm_available_get(realm, id, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_realm_available_get_with_http_info(realm, id, opts)
      data
    end

    # Get realm-level roles that are available to attach to this client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_realm_available_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_available_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_available_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_available_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/realm/available'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_realm_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_realm_composite_get(realm, id, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_realm_composite_get_with_http_info(realm, id, opts)
      data
    end

    # Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_realm_composite_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_composite_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_composite_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_composite_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/realm/composite'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_realm_composite_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a set of realm-level roles from the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_scope_mappings_realm_delete(realm, id, role_representation, opts = {})
      realm_client_scopes_id_scope_mappings_realm_delete_with_http_info(realm, id, role_representation, opts)
      nil
    end

    # Remove a set of realm-level roles from the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_scope_mappings_realm_delete_with_http_info(realm, id, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_delete"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_realm_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_client_scopes_id_scope_mappings_realm_get(realm, id, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_scope_mappings_realm_get_with_http_info(realm, id, opts)
      data
    end

    # Get realm-level roles associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_client_scopes_id_scope_mappings_realm_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_realm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a set of realm-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_scope_mappings_realm_post(realm, id, role_representation, opts = {})
      realm_client_scopes_id_scope_mappings_realm_post_with_http_info(realm, id, role_representation, opts)
      nil
    end

    # Add a set of realm-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_scope_mappings_realm_post_with_http_info(realm, id, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_client_scopes_id_scope_mappings_realm_post"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_client_scopes_id_scope_mappings_realm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_clients_client_available_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_clients_client_available_get_with_http_info(realm, id, client, opts)
      data
    end

    # The available client-level roles   Returns the roles for the client that can be associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_clients_client_available_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_available_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_available_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_available_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_available_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/clients/{client}/available'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_clients_client_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_clients_client_composite_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_clients_client_composite_get_with_http_info(realm, id, client, opts)
      data
    end

    # Get effective client roles   Returns the roles for the client that are associated with the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_clients_client_composite_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_composite_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_composite_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_composite_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_composite_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/clients/{client}/composite'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_clients_client_composite_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove client-level roles from the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_scope_mappings_clients_client_delete(realm, id, client, role_representation, opts = {})
      realm_clients_id_scope_mappings_clients_client_delete_with_http_info(realm, id, client, role_representation, opts)
      nil
    end

    # Remove client-level roles from the client’s scope.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_scope_mappings_clients_client_delete_with_http_info(realm, id, client, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_clients_client_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the roles associated with a client’s scope   Returns roles for the client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_clients_client_get(realm, id, client, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_clients_client_get_with_http_info(realm, id, client, opts)
      data
    end

    # Get the roles associated with a client’s scope   Returns roles for the client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_clients_client_get_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_get"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_clients_client_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add client-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_scope_mappings_clients_client_post(realm, id, client, role_representation, opts = {})
      realm_clients_id_scope_mappings_clients_client_post_with_http_info(realm, id, client, role_representation, opts)
      nil
    end

    # Add client-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client [String] 
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_scope_mappings_clients_client_post_with_http_info(realm, id, client, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_clients_client_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/clients/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_clients_client_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all scope mappings for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [MappingsRepresentation]
    def realm_clients_id_scope_mappings_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_get_with_http_info(realm, id, opts)
      data
    end

    # Get all scope mappings for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(MappingsRepresentation, Integer, Hash)>] MappingsRepresentation data, response status code and response headers
    def realm_clients_id_scope_mappings_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MappingsRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles that are available to attach to this client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_realm_available_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_realm_available_get_with_http_info(realm, id, opts)
      data
    end

    # Get realm-level roles that are available to attach to this client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_realm_available_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_realm_available_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_available_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_available_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/realm/available'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_realm_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_realm_composite_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_realm_composite_get_with_http_info(realm, id, opts)
      data
    end

    # Get effective realm-level roles associated with the client’s scope   What this does is recurse  any composite roles associated with the client’s scope and adds the roles to this lists.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return roles with their attributes
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_realm_composite_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_realm_composite_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_composite_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_composite_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/realm/composite'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_realm_composite_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a set of realm-level roles from the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_scope_mappings_realm_delete(realm, id, role_representation, opts = {})
      realm_clients_id_scope_mappings_realm_delete_with_http_info(realm, id, role_representation, opts)
      nil
    end

    # Remove a set of realm-level roles from the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_scope_mappings_realm_delete_with_http_info(realm, id, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_realm_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_realm_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_scope_mappings_realm_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_scope_mappings_realm_get_with_http_info(realm, id, opts)
      data
    end

    # Get realm-level roles associated with the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_scope_mappings_realm_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_realm_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_realm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a set of realm-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_scope_mappings_realm_post(realm, id, role_representation, opts = {})
      realm_clients_id_scope_mappings_realm_post_with_http_info(realm, id, role_representation, opts)
      nil
    end

    # Add a set of realm-level roles to the client’s scope
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_scope_mappings_realm_post_with_http_info(realm, id, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScopeMappingsApi.realm_clients_id_scope_mappings_realm_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling ScopeMappingsApi.realm_clients_id_scope_mappings_realm_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/scope-mappings/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScopeMappingsApi#realm_clients_id_scope_mappings_realm_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
