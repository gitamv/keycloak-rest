=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the number of users that match the given criteria.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email email filter
    # @option opts [String] :first_name first name filter
    # @option opts [String] :last_name last name filter
    # @option opts [String] :search arbitrary search string for all the fields below
    # @option opts [String] :username username filter
    # @return [Integer]
    def realm_users_count_get(realm, opts = {})
      data, _status_code, _headers = realm_users_count_get_with_http_info(realm, opts)
      data
    end

    # Returns the number of users that match the given criteria.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email email filter
    # @option opts [String] :first_name first name filter
    # @option opts [String] :last_name last name filter
    # @option opts [String] :search arbitrary search string for all the fields below
    # @option opts [String] :username username filter
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def realm_users_count_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_count_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_count_get"
      end
      # resource path
      local_var_path = '/{realm}/users/count'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get users   Returns a list of users, filtered according to query parameters
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [String] :email 
    # @option opts [Boolean] :enabled Boolean representing if user is enabled or not
    # @option opts [Boolean] :exact 
    # @option opts [Integer] :first 
    # @option opts [String] :first_name 
    # @option opts [String] :last_name 
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [String] :search A String contained in username, first or last name, or email
    # @option opts [String] :username 
    # @return [Array<UserRepresentation>]
    def realm_users_get(realm, opts = {})
      data, _status_code, _headers = realm_users_get_with_http_info(realm, opts)
      data
    end

    # Get users   Returns a list of users, filtered according to query parameters
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [String] :email 
    # @option opts [Boolean] :enabled Boolean representing if user is enabled or not
    # @option opts [Boolean] :exact 
    # @option opts [Integer] :first 
    # @option opts [String] :first_name 
    # @option opts [String] :last_name 
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [String] :search A String contained in username, first or last name, or email
    # @option opts [String] :username 
    # @return [Array<(Array<UserRepresentation>, Integer, Hash)>] Array<UserRepresentation> data, response status code and response headers
    def realm_users_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_get"
      end
      # resource path
      local_var_path = '/{realm}/users'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'exact'] = opts[:'exact'] if !opts[:'exact'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return credential types, which are provided by the user storage where user is stored.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def realm_users_id_configured_user_storage_credential_types_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_configured_user_storage_credential_types_get_with_http_info(realm, id, opts)
      data
    end

    # Return credential types, which are provided by the user storage where user is stored.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def realm_users_id_configured_user_storage_credential_types_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_configured_user_storage_credential_types_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_configured_user_storage_credential_types_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_configured_user_storage_credential_types_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/configured-user-storage-credential-types'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_configured_user_storage_credential_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke consent and offline tokens for particular client from user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param client [String] Client id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_consents_client_delete(realm, id, client, opts = {})
      realm_users_id_consents_client_delete_with_http_info(realm, id, client, opts)
      nil
    end

    # Revoke consent and offline tokens for particular client from user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param client [String] Client id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_consents_client_delete_with_http_info(realm, id, client, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_consents_client_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_consents_client_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_consents_client_delete"
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling UsersApi.realm_users_id_consents_client_delete"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/consents/{client}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client' + '}', CGI.escape(client.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_consents_client_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get consents granted by the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_users_id_consents_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_consents_get_with_http_info(realm, id, opts)
      data
    end

    # Get consents granted by the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_users_id_consents_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_consents_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_consents_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_consents_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/consents'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_consents_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a credential for a user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_credentials_credential_id_delete(realm, id, credential_id, opts = {})
      realm_users_id_credentials_credential_id_delete_with_http_info(realm, id, credential_id, opts)
      nil
    end

    # Remove a credential for a user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_credentials_credential_id_delete_with_http_info(realm, id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_credentials_credential_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_credentials_credential_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_credentials_credential_id_delete"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UsersApi.realm_users_id_credentials_credential_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/credentials/{credentialId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'credentialId' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_credentials_credential_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a credential to a position behind another credential
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] The credential to move
    # @param new_previous_credential_id [String] The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post(realm, id, credential_id, new_previous_credential_id, opts = {})
      realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post_with_http_info(realm, id, credential_id, new_previous_credential_id, opts)
      nil
    end

    # Move a credential to a position behind another credential
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] The credential to move
    # @param new_previous_credential_id [String] The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post_with_http_info(realm, id, credential_id, new_previous_credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UsersApi.realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post"
      end
      # verify the required parameter 'new_previous_credential_id' is set
      if @api_client.config.client_side_validation && new_previous_credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'new_previous_credential_id' when calling UsersApi.realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/credentials/{credentialId}/moveAfter/{newPreviousCredentialId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'credentialId' + '}', CGI.escape(credential_id.to_s)).sub('{' + 'newPreviousCredentialId' + '}', CGI.escape(new_previous_credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_credentials_credential_id_move_after_new_previous_credential_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a credential to a first position in the credentials list of the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] The credential to move
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_credentials_credential_id_move_to_first_post(realm, id, credential_id, opts = {})
      realm_users_id_credentials_credential_id_move_to_first_post_with_http_info(realm, id, credential_id, opts)
      nil
    end

    # Move a credential to a first position in the credentials list of the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] The credential to move
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_credentials_credential_id_move_to_first_post_with_http_info(realm, id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_credentials_credential_id_move_to_first_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_credentials_credential_id_move_to_first_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_credentials_credential_id_move_to_first_post"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UsersApi.realm_users_id_credentials_credential_id_move_to_first_post"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/credentials/{credentialId}/moveToFirst'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'credentialId' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_credentials_credential_id_move_to_first_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a credential label for a user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_credentials_credential_id_user_label_put(realm, id, credential_id, body, opts = {})
      realm_users_id_credentials_credential_id_user_label_put_with_http_info(realm, id, credential_id, body, opts)
      nil
    end

    # Update a credential label for a user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_id [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_credentials_credential_id_user_label_put_with_http_info(realm, id, credential_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_credentials_credential_id_user_label_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_credentials_credential_id_user_label_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_credentials_credential_id_user_label_put"
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling UsersApi.realm_users_id_credentials_credential_id_user_label_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UsersApi.realm_users_id_credentials_credential_id_user_label_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/credentials/{credentialId}/userLabel'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'credentialId' + '}', CGI.escape(credential_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_credentials_credential_id_user_label_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<CredentialRepresentation>]
    def realm_users_id_credentials_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_credentials_get_with_http_info(realm, id, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CredentialRepresentation>, Integer, Hash)>] Array<CredentialRepresentation> data, response status code and response headers
    def realm_users_id_credentials_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_credentials_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_credentials_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_credentials_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/credentials'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<CredentialRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_credentials_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_delete(realm, id, opts = {})
      realm_users_id_delete_with_http_info(realm, id, opts)
      nil
    end

    # Delete the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_delete_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable all credentials for a user of a specific type
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_disable_credential_types_put(realm, id, request_body, opts = {})
      realm_users_id_disable_credential_types_put_with_http_info(realm, id, request_body, opts)
      nil
    end

    # Disable all credentials for a user of a specific type
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_disable_credential_types_put_with_http_info(realm, id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_disable_credential_types_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_disable_credential_types_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_disable_credential_types_put"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling UsersApi.realm_users_id_disable_credential_types_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/disable-credential-types'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_disable_credential_types_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param request_body [Array<String>] required actions the user needs to complete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client id
    # @option opts [Integer] :lifespan Number of seconds after which the generated token expires
    # @option opts [String] :redirect_uri Redirect uri
    # @return [nil]
    def realm_users_id_execute_actions_email_put(realm, id, request_body, opts = {})
      realm_users_id_execute_actions_email_put_with_http_info(realm, id, request_body, opts)
      nil
    end

    # Send a update account email to the user   An email contains a link the user can click to perform a set of required actions.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param request_body [Array<String>] required actions the user needs to complete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client id
    # @option opts [Integer] :lifespan Number of seconds after which the generated token expires
    # @option opts [String] :redirect_uri Redirect uri
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_execute_actions_email_put_with_http_info(realm, id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_execute_actions_email_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_execute_actions_email_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_execute_actions_email_put"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling UsersApi.realm_users_id_execute_actions_email_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/execute-actions-email'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'lifespan'] = opts[:'lifespan'] if !opts[:'lifespan'].nil?
      query_params[:'redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_execute_actions_email_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get social logins associated with the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<FederatedIdentityRepresentation>]
    def realm_users_id_federated_identity_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_federated_identity_get_with_http_info(realm, id, opts)
      data
    end

    # Get social logins associated with the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FederatedIdentityRepresentation>, Integer, Hash)>] Array<FederatedIdentityRepresentation> data, response status code and response headers
    def realm_users_id_federated_identity_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_federated_identity_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_federated_identity_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_federated_identity_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/federated-identity'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<FederatedIdentityRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_federated_identity_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a social login provider from user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param provider [String] Social login provider id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_federated_identity_provider_delete(realm, id, provider, opts = {})
      realm_users_id_federated_identity_provider_delete_with_http_info(realm, id, provider, opts)
      nil
    end

    # Remove a social login provider from user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param provider [String] Social login provider id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_federated_identity_provider_delete_with_http_info(realm, id, provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_federated_identity_provider_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_federated_identity_provider_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_federated_identity_provider_delete"
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling UsersApi.realm_users_id_federated_identity_provider_delete"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/federated-identity/{provider}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'provider' + '}', CGI.escape(provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_federated_identity_provider_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a social login provider to the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param provider [String] Social login provider id
    # @param federated_identity_representation [FederatedIdentityRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_federated_identity_provider_post(realm, id, provider, federated_identity_representation, opts = {})
      realm_users_id_federated_identity_provider_post_with_http_info(realm, id, provider, federated_identity_representation, opts)
      nil
    end

    # Add a social login provider to the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param provider [String] Social login provider id
    # @param federated_identity_representation [FederatedIdentityRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_federated_identity_provider_post_with_http_info(realm, id, provider, federated_identity_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_federated_identity_provider_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_federated_identity_provider_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_federated_identity_provider_post"
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling UsersApi.realm_users_id_federated_identity_provider_post"
      end
      # verify the required parameter 'federated_identity_representation' is set
      if @api_client.config.client_side_validation && federated_identity_representation.nil?
        fail ArgumentError, "Missing the required parameter 'federated_identity_representation' when calling UsersApi.realm_users_id_federated_identity_provider_post"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/federated-identity/{provider}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'provider' + '}', CGI.escape(provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(federated_identity_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_federated_identity_provider_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get representation of the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [UserRepresentation]
    def realm_users_id_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_get_with_http_info(realm, id, opts)
      data
    end

    # Get representation of the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRepresentation, Integer, Hash)>] UserRepresentation data, response status code and response headers
    def realm_users_id_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UserRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search 
    # @return [Hash<String, Object>]
    def realm_users_id_groups_count_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_groups_count_get_with_http_info(realm, id, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search 
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_users_id_groups_count_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_groups_count_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_groups_count_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_groups_count_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/groups/count'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_groups_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Array<GroupRepresentation>]
    def realm_users_id_groups_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_groups_get_with_http_info(realm, id, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Array<(Array<GroupRepresentation>, Integer, Hash)>] Array<GroupRepresentation> data, response status code and response headers
    def realm_users_id_groups_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_groups_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_groups_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_groups_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/groups'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<GroupRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_groups_group_id_delete(realm, id, group_id, opts = {})
      realm_users_id_groups_group_id_delete_with_http_info(realm, id, group_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_groups_group_id_delete_with_http_info(realm, id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_groups_group_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_groups_group_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_groups_group_id_delete"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UsersApi.realm_users_id_groups_group_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/groups/{groupId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_groups_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_groups_group_id_put(realm, id, group_id, opts = {})
      realm_users_id_groups_group_id_put_with_http_info(realm, id, group_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_groups_group_id_put_with_http_info(realm, id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_groups_group_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_groups_group_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_groups_group_id_put"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling UsersApi.realm_users_id_groups_group_id_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/groups/{groupId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_groups_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Impersonate the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def realm_users_id_impersonation_post(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_impersonation_post_with_http_info(realm, id, opts)
      data
    end

    # Impersonate the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_users_id_impersonation_post_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_impersonation_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_impersonation_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_impersonation_post"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/impersonation'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_impersonation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_logout_post(realm, id, opts = {})
      realm_users_id_logout_post_with_http_info(realm, id, opts)
      nil
    end

    # Remove all user sessions associated with the user   Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_logout_post_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_logout_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_logout_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_logout_post"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/logout'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_logout_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get offline sessions associated with the user and client
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<UserSessionRepresentation>]
    def realm_users_id_offline_sessions_client_uuid_get(realm, id, client_uuid, opts = {})
      data, _status_code, _headers = realm_users_id_offline_sessions_client_uuid_get_with_http_info(realm, id, client_uuid, opts)
      data
    end

    # Get offline sessions associated with the user and client
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserSessionRepresentation>, Integer, Hash)>] Array<UserSessionRepresentation> data, response status code and response headers
    def realm_users_id_offline_sessions_client_uuid_get_with_http_info(realm, id, client_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_offline_sessions_client_uuid_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_offline_sessions_client_uuid_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_offline_sessions_client_uuid_get"
      end
      # verify the required parameter 'client_uuid' is set
      if @api_client.config.client_side_validation && client_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'client_uuid' when calling UsersApi.realm_users_id_offline_sessions_client_uuid_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/offline-sessions/{clientUuid}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'clientUuid' + '}', CGI.escape(client_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserSessionRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_offline_sessions_client_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param user_representation [UserRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_put(realm, id, user_representation, opts = {})
      realm_users_id_put_with_http_info(realm, id, user_representation, opts)
      nil
    end

    # Update the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param user_representation [UserRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_put_with_http_info(realm, id, user_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_put"
      end
      # verify the required parameter 'user_representation' is set
      if @api_client.config.client_side_validation && user_representation.nil?
        fail ArgumentError, "Missing the required parameter 'user_representation' when calling UsersApi.realm_users_id_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set up a new password for the user.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_representation [CredentialRepresentation] The representation must contain a rawPassword with the plain-text password
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_id_reset_password_put(realm, id, credential_representation, opts = {})
      realm_users_id_reset_password_put_with_http_info(realm, id, credential_representation, opts)
      nil
    end

    # Set up a new password for the user.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param credential_representation [CredentialRepresentation] The representation must contain a rawPassword with the plain-text password
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_reset_password_put_with_http_info(realm, id, credential_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_reset_password_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_reset_password_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_reset_password_put"
      end
      # verify the required parameter 'credential_representation' is set
      if @api_client.config.client_side_validation && credential_representation.nil?
        fail ArgumentError, "Missing the required parameter 'credential_representation' when calling UsersApi.realm_users_id_reset_password_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/reset-password'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(credential_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_reset_password_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client id
    # @option opts [String] :redirect_uri Redirect uri
    # @return [nil]
    def realm_users_id_send_verify_email_put(realm, id, opts = {})
      realm_users_id_send_verify_email_put_with_http_info(realm, id, opts)
      nil
    end

    # Send an email-verification email to the user   An email contains a link the user can click to verify their email address.
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client id
    # @option opts [String] :redirect_uri Redirect uri
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_id_send_verify_email_put_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_send_verify_email_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_send_verify_email_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_send_verify_email_put"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/send-verify-email'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_send_verify_email_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sessions associated with the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<UserSessionRepresentation>]
    def realm_users_id_sessions_get(realm, id, opts = {})
      data, _status_code, _headers = realm_users_id_sessions_get_with_http_info(realm, id, opts)
      data
    end

    # Get sessions associated with the user
    # @param realm [String] realm name (not id!)
    # @param id [String] User id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserSessionRepresentation>, Integer, Hash)>] Array<UserSessionRepresentation> data, response status code and response headers
    def realm_users_id_sessions_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_id_sessions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_id_sessions_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsersApi.realm_users_id_sessions_get"
      end
      # resource path
      local_var_path = '/{realm}/users/{id}/sessions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserSessionRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_id_sessions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new user   Username must be unique.
    # @param realm [String] realm name (not id!)
    # @param user_representation [UserRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_users_post(realm, user_representation, opts = {})
      realm_users_post_with_http_info(realm, user_representation, opts)
      nil
    end

    # Create a new user   Username must be unique.
    # @param realm [String] realm name (not id!)
    # @param user_representation [UserRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_users_post_with_http_info(realm, user_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.realm_users_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling UsersApi.realm_users_post"
      end
      # verify the required parameter 'user_representation' is set
      if @api_client.config.client_side_validation && user_representation.nil?
        fail ArgumentError, "Missing the required parameter 'user_representation' when calling UsersApi.realm_users_post"
      end
      # resource path
      local_var_path = '/{realm}/users'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(user_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#realm_users_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
