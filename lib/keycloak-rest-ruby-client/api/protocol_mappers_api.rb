=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class ProtocolMappersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id1_protocol_mappers_models_id2_delete(realm, id1, id2, opts = {})
      realm_client_scopes_id1_protocol_mappers_models_id2_delete_with_http_info(realm, id1, id2, opts)
      nil
    end

    # Delete the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id1_protocol_mappers_models_id2_delete_with_http_info(realm, id1, id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_delete"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_delete"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_delete"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id1_protocol_mappers_models_id2_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mapper by id
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProtocolMapperRepresentation]
    def realm_client_scopes_id1_protocol_mappers_models_id2_get(realm, id1, id2, opts = {})
      data, _status_code, _headers = realm_client_scopes_id1_protocol_mappers_models_id2_get_with_http_info(realm, id1, id2, opts)
      data
    end

    # Get mapper by id
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProtocolMapperRepresentation, Integer, Hash)>] ProtocolMapperRepresentation data, response status code and response headers
    def realm_client_scopes_id1_protocol_mappers_models_id2_get_with_http_info(realm, id1, id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_get"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_get"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ProtocolMapperRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id1_protocol_mappers_models_id2_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id1_protocol_mappers_models_id2_put(realm, id1, id2, protocol_mapper_representation, opts = {})
      realm_client_scopes_id1_protocol_mappers_models_id2_put_with_http_info(realm, id1, id2, protocol_mapper_representation, opts)
      nil
    end

    # Update the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id1_protocol_mappers_models_id2_put_with_http_info(realm, id1, id2, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_client_scopes_id1_protocol_mappers_models_id2_put"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id1_protocol_mappers_models_id2_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol_mapper_representation [Array<ProtocolMapperRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_protocol_mappers_add_models_post(realm, id, protocol_mapper_representation, opts = {})
      realm_client_scopes_id_protocol_mappers_add_models_post_with_http_info(realm, id, protocol_mapper_representation, opts)
      nil
    end

    # Create multiple mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol_mapper_representation [Array<ProtocolMapperRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_protocol_mappers_add_models_post_with_http_info(realm, id, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_add_models_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_add_models_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_add_models_post"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_add_models_post"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/protocol-mappers/add-models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id_protocol_mappers_add_models_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<ProtocolMapperRepresentation>]
    def realm_client_scopes_id_protocol_mappers_models_get(realm, id, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_protocol_mappers_models_get_with_http_info(realm, id, opts)
      data
    end

    # Get mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProtocolMapperRepresentation>, Integer, Hash)>] Array<ProtocolMapperRepresentation> data, response status code and response headers
    def realm_client_scopes_id_protocol_mappers_models_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/protocol-mappers/models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ProtocolMapperRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id_protocol_mappers_models_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a mapper
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_client_scopes_id_protocol_mappers_models_post(realm, id, protocol_mapper_representation, opts = {})
      realm_client_scopes_id_protocol_mappers_models_post_with_http_info(realm, id, protocol_mapper_representation, opts)
      nil
    end

    # Create a mapper
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_client_scopes_id_protocol_mappers_models_post_with_http_info(realm, id, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_post"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_models_post"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/protocol-mappers/models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id_protocol_mappers_models_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappers by name for a specific protocol
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ProtocolMapperRepresentation>]
    def realm_client_scopes_id_protocol_mappers_protocol_protocol_get(realm, id, protocol, opts = {})
      data, _status_code, _headers = realm_client_scopes_id_protocol_mappers_protocol_protocol_get_with_http_info(realm, id, protocol, opts)
      data
    end

    # Get mappers by name for a specific protocol
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client scope (not name)
    # @param protocol [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProtocolMapperRepresentation>, Integer, Hash)>] Array<ProtocolMapperRepresentation> data, response status code and response headers
    def realm_client_scopes_id_protocol_mappers_protocol_protocol_get_with_http_info(realm, id, protocol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_protocol_protocol_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_protocol_protocol_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_protocol_protocol_get"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling ProtocolMappersApi.realm_client_scopes_id_protocol_mappers_protocol_protocol_get"
      end
      # resource path
      local_var_path = '/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'protocol' + '}', CGI.escape(protocol.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ProtocolMapperRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_client_scopes_id_protocol_mappers_protocol_protocol_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id1_protocol_mappers_models_id2_delete(realm, id1, id2, opts = {})
      realm_clients_id1_protocol_mappers_models_id2_delete_with_http_info(realm, id1, id2, opts)
      nil
    end

    # Delete the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id1_protocol_mappers_models_id2_delete_with_http_info(realm, id1, id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_delete"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_delete"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id1_protocol_mappers_models_id2_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mapper by id
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProtocolMapperRepresentation]
    def realm_clients_id1_protocol_mappers_models_id2_get(realm, id1, id2, opts = {})
      data, _status_code, _headers = realm_clients_id1_protocol_mappers_models_id2_get_with_http_info(realm, id1, id2, opts)
      data
    end

    # Get mapper by id
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProtocolMapperRepresentation, Integer, Hash)>] ProtocolMapperRepresentation data, response status code and response headers
    def realm_clients_id1_protocol_mappers_models_id2_get_with_http_info(realm, id1, id2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_get"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_get"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ProtocolMapperRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id1_protocol_mappers_models_id2_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id1_protocol_mappers_models_id2_put(realm, id1, id2, protocol_mapper_representation, opts = {})
      realm_clients_id1_protocol_mappers_models_id2_put_with_http_info(realm, id1, id2, protocol_mapper_representation, opts)
      nil
    end

    # Update the mapper
    # @param realm [String] realm name (not id!)
    # @param id1 [String] 
    # @param id2 [String] 
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id1_protocol_mappers_models_id2_put_with_http_info(realm, id1, id2, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'id1' is set
      if @api_client.config.client_side_validation && id1.nil?
        fail ArgumentError, "Missing the required parameter 'id1' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'id2' is set
      if @api_client.config.client_side_validation && id2.nil?
        fail ArgumentError, "Missing the required parameter 'id2' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_put"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_clients_id1_protocol_mappers_models_id2_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id1}/protocol-mappers/models/{id2}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id1' + '}', CGI.escape(id1.to_s)).sub('{' + 'id2' + '}', CGI.escape(id2.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id1_protocol_mappers_models_id2_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol_mapper_representation [Array<ProtocolMapperRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_protocol_mappers_add_models_post(realm, id, protocol_mapper_representation, opts = {})
      realm_clients_id_protocol_mappers_add_models_post_with_http_info(realm, id, protocol_mapper_representation, opts)
      nil
    end

    # Create multiple mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol_mapper_representation [Array<ProtocolMapperRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_protocol_mappers_add_models_post_with_http_info(realm, id, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id_protocol_mappers_add_models_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_add_models_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_add_models_post"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_add_models_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/protocol-mappers/add-models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id_protocol_mappers_add_models_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<ProtocolMapperRepresentation>]
    def realm_clients_id_protocol_mappers_models_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_protocol_mappers_models_get_with_http_info(realm, id, opts)
      data
    end

    # Get mappers
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProtocolMapperRepresentation>, Integer, Hash)>] Array<ProtocolMapperRepresentation> data, response status code and response headers
    def realm_clients_id_protocol_mappers_models_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id_protocol_mappers_models_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_models_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_models_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/protocol-mappers/models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ProtocolMapperRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id_protocol_mappers_models_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a mapper
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_protocol_mappers_models_post(realm, id, protocol_mapper_representation, opts = {})
      realm_clients_id_protocol_mappers_models_post_with_http_info(realm, id, protocol_mapper_representation, opts)
      nil
    end

    # Create a mapper
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol_mapper_representation [ProtocolMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_protocol_mappers_models_post_with_http_info(realm, id, protocol_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id_protocol_mappers_models_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_models_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_models_post"
      end
      # verify the required parameter 'protocol_mapper_representation' is set
      if @api_client.config.client_side_validation && protocol_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'protocol_mapper_representation' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_models_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/protocol-mappers/models'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(protocol_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id_protocol_mappers_models_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappers by name for a specific protocol
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ProtocolMapperRepresentation>]
    def realm_clients_id_protocol_mappers_protocol_protocol_get(realm, id, protocol, opts = {})
      data, _status_code, _headers = realm_clients_id_protocol_mappers_protocol_protocol_get_with_http_info(realm, id, protocol, opts)
      data
    end

    # Get mappers by name for a specific protocol
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param protocol [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ProtocolMapperRepresentation>, Integer, Hash)>] Array<ProtocolMapperRepresentation> data, response status code and response headers
    def realm_clients_id_protocol_mappers_protocol_protocol_get_with_http_info(realm, id, protocol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProtocolMappersApi.realm_clients_id_protocol_mappers_protocol_protocol_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_protocol_protocol_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_protocol_protocol_get"
      end
      # verify the required parameter 'protocol' is set
      if @api_client.config.client_side_validation && protocol.nil?
        fail ArgumentError, "Missing the required parameter 'protocol' when calling ProtocolMappersApi.realm_clients_id_protocol_mappers_protocol_protocol_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'protocol' + '}', CGI.escape(protocol.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ProtocolMapperRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProtocolMappersApi#realm_clients_id_protocol_mappers_protocol_protocol_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
