=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all roles for the realm or client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Object]
    def realm_clients_id_roles_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_get_with_http_info(realm, id, opts)
      data
    end

    # Get all roles for the realm or client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def realm_clients_id_roles_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new role for the realm or client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_roles_post(realm, id, role_representation, opts = {})
      realm_clients_id_roles_post_with_http_info(realm, id, role_representation, opts)
      nil
    end

    # Create a new role for the realm or client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_roles_post_with_http_info(realm, id, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_clients_id_roles_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client-level roles for the client that are in the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_roles_role_name_composites_clients_client_uuid_get(realm, id, role_name, client_uuid, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_composites_clients_client_uuid_get_with_http_info(realm, id, role_name, client_uuid, opts)
      data
    end

    # Get client-level roles for the client that are in the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_roles_role_name_composites_clients_client_uuid_get_with_http_info(realm, id, role_name, client_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_composites_clients_client_uuid_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_composites_clients_client_uuid_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_composites_clients_client_uuid_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_composites_clients_client_uuid_get"
      end
      # verify the required parameter 'client_uuid' is set
      if @api_client.config.client_side_validation && client_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'client_uuid' when calling RolesApi.realm_clients_id_roles_role_name_composites_clients_client_uuid_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s)).sub('{' + 'clientUuid' + '}', CGI.escape(client_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_composites_clients_client_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove roles from the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] roles to remove
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_roles_role_name_composites_delete(realm, id, role_name, role_representation, opts = {})
      realm_clients_id_roles_role_name_composites_delete_with_http_info(realm, id, role_name, role_representation, opts)
      nil
    end

    # Remove roles from the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] roles to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_roles_role_name_composites_delete_with_http_info(realm, id, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_composites_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_composites_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_composites_delete"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_composites_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_clients_id_roles_role_name_composites_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_composites_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get composites of the role
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_roles_role_name_composites_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_composites_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Get composites of the role
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_roles_role_name_composites_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_composites_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_composites_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_composites_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_composites_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_composites_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a composite to the role
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_roles_role_name_composites_post(realm, id, role_name, role_representation, opts = {})
      realm_clients_id_roles_role_name_composites_post_with_http_info(realm, id, role_name, role_representation, opts)
      nil
    end

    # Add a composite to the role
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_roles_role_name_composites_post_with_http_info(realm, id, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_composites_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_composites_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_composites_post"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_composites_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_clients_id_roles_role_name_composites_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_composites_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles of the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_roles_role_name_composites_realm_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_composites_realm_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Get realm-level roles of the role’s composite
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_roles_role_name_composites_realm_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_composites_realm_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_composites_realm_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_composites_realm_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_composites_realm_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/composites/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_composites_realm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_roles_role_name_delete(realm, id, role_name, opts = {})
      realm_clients_id_roles_role_name_delete_with_http_info(realm, id, role_name, opts)
      nil
    end

    # Delete a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_roles_role_name_delete_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_delete"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [RoleRepresentation]
    def realm_clients_id_roles_role_name_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Get a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleRepresentation, Integer, Hash)>] RoleRepresentation data, response status code and response headers
    def realm_clients_id_roles_role_name_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RoleRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return List of Groups that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<GroupRepresentation>]
    def realm_clients_id_roles_role_name_groups_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_groups_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Return List of Groups that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<(Array<GroupRepresentation>, Integer, Hash)>] Array<GroupRepresentation> data, response status code and response headers
    def realm_clients_id_roles_role_name_groups_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_groups_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_groups_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_groups_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_groups_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/groups'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<GroupRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_clients_id_roles_role_name_management_permissions_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_management_permissions_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_clients_id_roles_role_name_management_permissions_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_management_permissions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_management_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_clients_id_roles_role_name_management_permissions_put(realm, id, role_name, management_permission_reference, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_management_permissions_put_with_http_info(realm, id, role_name, management_permission_reference, opts)
      data
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_clients_id_roles_role_name_management_permissions_put_with_http_info(realm, id, role_name, management_permission_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_management_permissions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_put"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_put"
      end
      # verify the required parameter 'management_permission_reference' is set
      if @api_client.config.client_side_validation && management_permission_reference.nil?
        fail ArgumentError, "Missing the required parameter 'management_permission_reference' when calling RolesApi.realm_clients_id_roles_role_name_management_permissions_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(management_permission_reference) 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_management_permissions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_roles_role_name_put(realm, id, role_name, role_representation, opts = {})
      realm_clients_id_roles_role_name_put_with_http_info(realm, id, role_name, role_representation, opts)
      nil
    end

    # Update a role by name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_roles_role_name_put_with_http_info(realm, id, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_put"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_put"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_clients_id_roles_role_name_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return List of Users that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<UserRepresentation>]
    def realm_clients_id_roles_role_name_users_get(realm, id, role_name, opts = {})
      data, _status_code, _headers = realm_clients_id_roles_role_name_users_get_with_http_info(realm, id, role_name, opts)
      data
    end

    # Return List of Users that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<(Array<UserRepresentation>, Integer, Hash)>] Array<UserRepresentation> data, response status code and response headers
    def realm_clients_id_roles_role_name_users_get_with_http_info(realm, id, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_clients_id_roles_role_name_users_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_clients_id_roles_role_name_users_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RolesApi.realm_clients_id_roles_role_name_users_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_clients_id_roles_role_name_users_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/roles/{role-name}/users'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_clients_id_roles_role_name_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all roles for the realm or client
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Object]
    def realm_roles_get(realm, opts = {})
      data, _status_code, _headers = realm_roles_get_with_http_info(realm, opts)
      data
    end

    # Get all roles for the realm or client
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @option opts [String] :search 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def realm_roles_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_get"
      end
      # resource path
      local_var_path = '/{realm}/roles'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new role for the realm or client
    # @param realm [String] realm name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_roles_post(realm, role_representation, opts = {})
      realm_roles_post_with_http_info(realm, role_representation, opts)
      nil
    end

    # Create a new role for the realm or client
    # @param realm [String] realm name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_roles_post_with_http_info(realm, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_roles_post"
      end
      # resource path
      local_var_path = '/{realm}/roles'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client-level roles for the client that are in the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_roles_role_name_composites_clients_client_uuid_get(realm, role_name, client_uuid, opts = {})
      data, _status_code, _headers = realm_roles_role_name_composites_clients_client_uuid_get_with_http_info(realm, role_name, client_uuid, opts)
      data
    end

    # Get client-level roles for the client that are in the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param client_uuid [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_roles_role_name_composites_clients_client_uuid_get_with_http_info(realm, role_name, client_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_composites_clients_client_uuid_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_composites_clients_client_uuid_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_composites_clients_client_uuid_get"
      end
      # verify the required parameter 'client_uuid' is set
      if @api_client.config.client_side_validation && client_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'client_uuid' when calling RolesApi.realm_roles_role_name_composites_clients_client_uuid_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/composites/clients/{clientUuid}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s)).sub('{' + 'clientUuid' + '}', CGI.escape(client_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_composites_clients_client_uuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove roles from the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] roles to remove
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_roles_role_name_composites_delete(realm, role_name, role_representation, opts = {})
      realm_roles_role_name_composites_delete_with_http_info(realm, role_name, role_representation, opts)
      nil
    end

    # Remove roles from the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] roles to remove
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_roles_role_name_composites_delete_with_http_info(realm, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_composites_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_composites_delete"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_composites_delete"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_roles_role_name_composites_delete"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_composites_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get composites of the role
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_roles_role_name_composites_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_composites_get_with_http_info(realm, role_name, opts)
      data
    end

    # Get composites of the role
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_roles_role_name_composites_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_composites_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_composites_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_composites_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_composites_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a composite to the role
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_roles_role_name_composites_post(realm, role_name, role_representation, opts = {})
      realm_roles_role_name_composites_post_with_http_info(realm, role_name, role_representation, opts)
      nil
    end

    # Add a composite to the role
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [Array<RoleRepresentation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_roles_role_name_composites_post_with_http_info(realm, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_composites_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_composites_post"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_composites_post"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_roles_role_name_composites_post"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/composites'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_composites_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm-level roles of the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<RoleRepresentation>]
    def realm_roles_role_name_composites_realm_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_composites_realm_get_with_http_info(realm, role_name, opts)
      data
    end

    # Get realm-level roles of the role’s composite
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_roles_role_name_composites_realm_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_composites_realm_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_composites_realm_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_composites_realm_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/composites/realm'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_composites_realm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_roles_role_name_delete(realm, role_name, opts = {})
      realm_roles_role_name_delete_with_http_info(realm, role_name, opts)
      nil
    end

    # Delete a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_roles_role_name_delete_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_delete"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_delete"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [RoleRepresentation]
    def realm_roles_role_name_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_get_with_http_info(realm, role_name, opts)
      data
    end

    # Get a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleRepresentation, Integer, Hash)>] RoleRepresentation data, response status code and response headers
    def realm_roles_role_name_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RoleRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return List of Groups that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<GroupRepresentation>]
    def realm_roles_role_name_groups_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_groups_get_with_http_info(realm, role_name, opts)
      data
    end

    # Return List of Groups that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :brief_representation if false, return a full representation of the GroupRepresentation objects
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<(Array<GroupRepresentation>, Integer, Hash)>] Array<GroupRepresentation> data, response status code and response headers
    def realm_roles_role_name_groups_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_groups_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_groups_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_groups_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/groups'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'briefRepresentation'] = opts[:'brief_representation'] if !opts[:'brief_representation'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<GroupRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_roles_role_name_management_permissions_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_management_permissions_get_with_http_info(realm, role_name, opts)
      data
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_roles_role_name_management_permissions_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_management_permissions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_management_permissions_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_management_permissions_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_management_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_roles_role_name_management_permissions_put(realm, role_name, management_permission_reference, opts = {})
      data, _status_code, _headers = realm_roles_role_name_management_permissions_put_with_http_info(realm, role_name, management_permission_reference, opts)
      data
    end

    # Return object stating whether role Authoirzation permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_roles_role_name_management_permissions_put_with_http_info(realm, role_name, management_permission_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_management_permissions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_management_permissions_put"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_management_permissions_put"
      end
      # verify the required parameter 'management_permission_reference' is set
      if @api_client.config.client_side_validation && management_permission_reference.nil?
        fail ArgumentError, "Missing the required parameter 'management_permission_reference' when calling RolesApi.realm_roles_role_name_management_permissions_put"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(management_permission_reference) 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_management_permissions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_roles_role_name_put(realm, role_name, role_representation, opts = {})
      realm_roles_role_name_put_with_http_info(realm, role_name, role_representation, opts)
      nil
    end

    # Update a role by name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] role’s name (not id!)
    # @param role_representation [RoleRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_roles_role_name_put_with_http_info(realm, role_name, role_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_put"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_put"
      end
      # verify the required parameter 'role_representation' is set
      if @api_client.config.client_side_validation && role_representation.nil?
        fail ArgumentError, "Missing the required parameter 'role_representation' when calling RolesApi.realm_roles_role_name_put"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(role_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return List of Users that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<UserRepresentation>]
    def realm_roles_role_name_users_get(realm, role_name, opts = {})
      data, _status_code, _headers = realm_roles_role_name_users_get_with_http_info(realm, role_name, opts)
      data
    end

    # Return List of Users that have the specified role name
    # @param realm [String] realm name (not id!)
    # @param role_name [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first 
    # @option opts [Integer] :max 
    # @return [Array<(Array<UserRepresentation>, Integer, Hash)>] Array<UserRepresentation> data, response status code and response headers
    def realm_roles_role_name_users_get_with_http_info(realm, role_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.realm_roles_role_name_users_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RolesApi.realm_roles_role_name_users_get"
      end
      # verify the required parameter 'role_name' is set
      if @api_client.config.client_side_validation && role_name.nil?
        fail ArgumentError, "Missing the required parameter 'role_name' when calling RolesApi.realm_roles_role_name_users_get"
      end
      # resource path
      local_var_path = '/{realm}/roles/{role-name}/users'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'role-name' + '}', CGI.escape(role_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#realm_roles_role_name_users_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
