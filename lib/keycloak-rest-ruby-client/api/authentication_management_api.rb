=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class AuthenticationManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get authenticator providers   Returns a list of authenticator providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_authentication_authenticator_providers_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_authenticator_providers_get_with_http_info(realm, opts)
      data
    end

    # Get authenticator providers   Returns a list of authenticator providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_authentication_authenticator_providers_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_authenticator_providers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_authenticator_providers_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/authenticator-providers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_authenticator_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client authenticator providers   Returns a list of client authenticator providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_authentication_client_authenticator_providers_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_client_authenticator_providers_get_with_http_info(realm, opts)
      data
    end

    # Get client authenticator providers   Returns a list of client authenticator providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_authentication_client_authenticator_providers_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_client_authenticator_providers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_client_authenticator_providers_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/client-authenticator-providers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_client_authenticator_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authenticator provider’s configuration description
    # @param realm [String] realm name (not id!)
    # @param provider_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [AuthenticatorConfigInfoRepresentation]
    def realm_authentication_config_description_provider_id_get(realm, provider_id, opts = {})
      data, _status_code, _headers = realm_authentication_config_description_provider_id_get_with_http_info(realm, provider_id, opts)
      data
    end

    # Get authenticator provider’s configuration description
    # @param realm [String] realm name (not id!)
    # @param provider_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticatorConfigInfoRepresentation, Integer, Hash)>] AuthenticatorConfigInfoRepresentation data, response status code and response headers
    def realm_authentication_config_description_provider_id_get_with_http_info(realm, provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_config_description_provider_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_config_description_provider_id_get"
      end
      # verify the required parameter 'provider_id' is set
      if @api_client.config.client_side_validation && provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'provider_id' when calling AuthenticationManagementApi.realm_authentication_config_description_provider_id_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/config-description/{providerId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'providerId' + '}', CGI.escape(provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AuthenticatorConfigInfoRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_config_description_provider_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_config_id_delete(realm, id, opts = {})
      realm_authentication_config_id_delete_with_http_info(realm, id, opts)
      nil
    end

    # Delete authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_config_id_delete_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_config_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_config_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_config_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/authentication/config/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_config_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param [Hash] opts the optional parameters
    # @return [AuthenticatorConfigRepresentation]
    def realm_authentication_config_id_get(realm, id, opts = {})
      data, _status_code, _headers = realm_authentication_config_id_get_with_http_info(realm, id, opts)
      data
    end

    # Get authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticatorConfigRepresentation, Integer, Hash)>] AuthenticatorConfigRepresentation data, response status code and response headers
    def realm_authentication_config_id_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_config_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_config_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_config_id_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/config/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AuthenticatorConfigRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_config_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param authenticator_config_representation [AuthenticatorConfigRepresentation] JSON describing new state of authenticator configuration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_config_id_put(realm, id, authenticator_config_representation, opts = {})
      realm_authentication_config_id_put_with_http_info(realm, id, authenticator_config_representation, opts)
      nil
    end

    # Update authenticator configuration
    # @param realm [String] realm name (not id!)
    # @param id [String] Configuration id
    # @param authenticator_config_representation [AuthenticatorConfigRepresentation] JSON describing new state of authenticator configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_config_id_put_with_http_info(realm, id, authenticator_config_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_config_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_config_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_config_id_put"
      end
      # verify the required parameter 'authenticator_config_representation' is set
      if @api_client.config.client_side_validation && authenticator_config_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authenticator_config_representation' when calling AuthenticationManagementApi.realm_authentication_config_id_put"
      end
      # resource path
      local_var_path = '/{realm}/authentication/config/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authenticator_config_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_config_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update execution with new configuration
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param authenticator_config_representation [AuthenticatorConfigRepresentation] JSON with new configuration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_execution_id_config_post(realm, execution_id, authenticator_config_representation, opts = {})
      realm_authentication_executions_execution_id_config_post_with_http_info(realm, execution_id, authenticator_config_representation, opts)
      nil
    end

    # Update execution with new configuration
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param authenticator_config_representation [AuthenticatorConfigRepresentation] JSON with new configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_execution_id_config_post_with_http_info(realm, execution_id, authenticator_config_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_execution_id_config_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_config_post"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_config_post"
      end
      # verify the required parameter 'authenticator_config_representation' is set
      if @api_client.config.client_side_validation && authenticator_config_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authenticator_config_representation' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_config_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions/{executionId}/config'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authenticator_config_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_execution_id_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete execution
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_execution_id_delete(realm, execution_id, opts = {})
      realm_authentication_executions_execution_id_delete_with_http_info(realm, execution_id, opts)
      nil
    end

    # Delete execution
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_execution_id_delete_with_http_info(realm, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_execution_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_delete"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions/{executionId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_execution_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Single Execution
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_execution_id_get(realm, execution_id, opts = {})
      realm_authentication_executions_execution_id_get_with_http_info(realm, execution_id, opts)
      nil
    end

    # Get Single Execution
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_execution_id_get_with_http_info(realm, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_execution_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_get"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions/{executionId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_execution_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lower execution’s priority
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_execution_id_lower_priority_post(realm, execution_id, opts = {})
      realm_authentication_executions_execution_id_lower_priority_post_with_http_info(realm, execution_id, opts)
      nil
    end

    # Lower execution’s priority
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_execution_id_lower_priority_post_with_http_info(realm, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_execution_id_lower_priority_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_lower_priority_post"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_lower_priority_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions/{executionId}/lower-priority'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_execution_id_lower_priority_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Raise execution’s priority
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_execution_id_raise_priority_post(realm, execution_id, opts = {})
      realm_authentication_executions_execution_id_raise_priority_post_with_http_info(realm, execution_id, opts)
      nil
    end

    # Raise execution’s priority
    # @param realm [String] realm name (not id!)
    # @param execution_id [String] Execution id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_execution_id_raise_priority_post_with_http_info(realm, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_execution_id_raise_priority_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_raise_priority_post"
      end
      # verify the required parameter 'execution_id' is set
      if @api_client.config.client_side_validation && execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'execution_id' when calling AuthenticationManagementApi.realm_authentication_executions_execution_id_raise_priority_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions/{executionId}/raise-priority'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'executionId' + '}', CGI.escape(execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_execution_id_raise_priority_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new authentication execution
    # @param realm [String] realm name (not id!)
    # @param authentication_execution_representation [AuthenticationExecutionRepresentation] JSON model describing authentication execution
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_executions_post(realm, authentication_execution_representation, opts = {})
      realm_authentication_executions_post_with_http_info(realm, authentication_execution_representation, opts)
      nil
    end

    # Add new authentication execution
    # @param realm [String] realm name (not id!)
    # @param authentication_execution_representation [AuthenticationExecutionRepresentation] JSON model describing authentication execution
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_executions_post_with_http_info(realm, authentication_execution_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_executions_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_executions_post"
      end
      # verify the required parameter 'authentication_execution_representation' is set
      if @api_client.config.client_side_validation && authentication_execution_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authentication_execution_representation' when calling AuthenticationManagementApi.realm_authentication_executions_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/executions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authentication_execution_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_executions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy existing authentication flow under a new name   The new name is given as 'newName' attribute of the passed JSON object
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Name of the existing authentication flow
    # @param request_body [Hash<String, Object>] JSON containing &#39;newName&#39; attribute
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_flow_alias_copy_post(realm, flow_alias, request_body, opts = {})
      realm_authentication_flows_flow_alias_copy_post_with_http_info(realm, flow_alias, request_body, opts)
      nil
    end

    # Copy existing authentication flow under a new name   The new name is given as &#39;newName&#39; attribute of the passed JSON object
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Name of the existing authentication flow
    # @param request_body [Hash<String, Object>] JSON containing &#39;newName&#39; attribute
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_flow_alias_copy_post_with_http_info(realm, flow_alias, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_flow_alias_copy_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_copy_post"
      end
      # verify the required parameter 'flow_alias' is set
      if @api_client.config.client_side_validation && flow_alias.nil?
        fail ArgumentError, "Missing the required parameter 'flow_alias' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_copy_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_copy_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{flowAlias}/copy'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'flowAlias' + '}', CGI.escape(flow_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_flow_alias_copy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new authentication execution to a flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Alias of parent flow
    # @param request_body [Hash<String, Object>] New execution JSON data containing &#39;provider&#39; attribute
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_flow_alias_executions_execution_post(realm, flow_alias, request_body, opts = {})
      realm_authentication_flows_flow_alias_executions_execution_post_with_http_info(realm, flow_alias, request_body, opts)
      nil
    end

    # Add new authentication execution to a flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Alias of parent flow
    # @param request_body [Hash<String, Object>] New execution JSON data containing &#39;provider&#39; attribute
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_flow_alias_executions_execution_post_with_http_info(realm, flow_alias, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_execution_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_execution_post"
      end
      # verify the required parameter 'flow_alias' is set
      if @api_client.config.client_side_validation && flow_alias.nil?
        fail ArgumentError, "Missing the required parameter 'flow_alias' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_execution_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_execution_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{flowAlias}/executions/execution'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'flowAlias' + '}', CGI.escape(flow_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_flow_alias_executions_execution_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add new flow with new execution to existing flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Alias of parent authentication flow
    # @param request_body [Hash<String, Object>] New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_flow_alias_executions_flow_post(realm, flow_alias, request_body, opts = {})
      realm_authentication_flows_flow_alias_executions_flow_post_with_http_info(realm, flow_alias, request_body, opts)
      nil
    end

    # Add new flow with new execution to existing flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Alias of parent authentication flow
    # @param request_body [Hash<String, Object>] New authentication flow / execution JSON data containing &#39;alias&#39;, &#39;type&#39;, &#39;provider&#39;, and &#39;description&#39; attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_flow_alias_executions_flow_post_with_http_info(realm, flow_alias, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_flow_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_flow_post"
      end
      # verify the required parameter 'flow_alias' is set
      if @api_client.config.client_side_validation && flow_alias.nil?
        fail ArgumentError, "Missing the required parameter 'flow_alias' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_flow_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_flow_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{flowAlias}/executions/flow'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'flowAlias' + '}', CGI.escape(flow_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_flow_alias_executions_flow_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authentication executions for a flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Flow alias
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_flow_alias_executions_get(realm, flow_alias, opts = {})
      realm_authentication_flows_flow_alias_executions_get_with_http_info(realm, flow_alias, opts)
      nil
    end

    # Get authentication executions for a flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Flow alias
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_flow_alias_executions_get_with_http_info(realm, flow_alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_get"
      end
      # verify the required parameter 'flow_alias' is set
      if @api_client.config.client_side_validation && flow_alias.nil?
        fail ArgumentError, "Missing the required parameter 'flow_alias' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{flowAlias}/executions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'flowAlias' + '}', CGI.escape(flow_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_flow_alias_executions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update authentication executions of a Flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Flow alias
    # @param authentication_execution_info_representation [AuthenticationExecutionInfoRepresentation] AuthenticationExecutionInfoRepresentation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_flow_alias_executions_put(realm, flow_alias, authentication_execution_info_representation, opts = {})
      realm_authentication_flows_flow_alias_executions_put_with_http_info(realm, flow_alias, authentication_execution_info_representation, opts)
      nil
    end

    # Update authentication executions of a Flow
    # @param realm [String] realm name (not id!)
    # @param flow_alias [String] Flow alias
    # @param authentication_execution_info_representation [AuthenticationExecutionInfoRepresentation] AuthenticationExecutionInfoRepresentation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_flow_alias_executions_put_with_http_info(realm, flow_alias, authentication_execution_info_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_put"
      end
      # verify the required parameter 'flow_alias' is set
      if @api_client.config.client_side_validation && flow_alias.nil?
        fail ArgumentError, "Missing the required parameter 'flow_alias' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_put"
      end
      # verify the required parameter 'authentication_execution_info_representation' is set
      if @api_client.config.client_side_validation && authentication_execution_info_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authentication_execution_info_representation' when calling AuthenticationManagementApi.realm_authentication_flows_flow_alias_executions_put"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{flowAlias}/executions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'flowAlias' + '}', CGI.escape(flow_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authentication_execution_info_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_flow_alias_executions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authentication flows   Returns a list of authentication flows.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<AuthenticationFlowRepresentation>]
    def realm_authentication_flows_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_flows_get_with_http_info(realm, opts)
      data
    end

    # Get authentication flows   Returns a list of authentication flows.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AuthenticationFlowRepresentation>, Integer, Hash)>] Array<AuthenticationFlowRepresentation> data, response status code and response headers
    def realm_authentication_flows_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AuthenticationFlowRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an authentication flow
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_id_delete(realm, id, opts = {})
      realm_authentication_flows_id_delete_with_http_info(realm, id, opts)
      nil
    end

    # Delete an authentication flow
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_id_delete_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_flows_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authentication flow for id
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param [Hash] opts the optional parameters
    # @return [AuthenticationFlowRepresentation]
    def realm_authentication_flows_id_get(realm, id, opts = {})
      data, _status_code, _headers = realm_authentication_flows_id_get_with_http_info(realm, id, opts)
      data
    end

    # Get authentication flow for id
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthenticationFlowRepresentation, Integer, Hash)>] AuthenticationFlowRepresentation data, response status code and response headers
    def realm_authentication_flows_id_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_flows_id_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AuthenticationFlowRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an authentication flow
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param authentication_flow_representation [AuthenticationFlowRepresentation] Authentication flow representation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_id_put(realm, id, authentication_flow_representation, opts = {})
      realm_authentication_flows_id_put_with_http_info(realm, id, authentication_flow_representation, opts)
      nil
    end

    # Update an authentication flow
    # @param realm [String] realm name (not id!)
    # @param id [String] Flow id
    # @param authentication_flow_representation [AuthenticationFlowRepresentation] Authentication flow representation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_id_put_with_http_info(realm, id, authentication_flow_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AuthenticationManagementApi.realm_authentication_flows_id_put"
      end
      # verify the required parameter 'authentication_flow_representation' is set
      if @api_client.config.client_side_validation && authentication_flow_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authentication_flow_representation' when calling AuthenticationManagementApi.realm_authentication_flows_id_put"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authentication_flow_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new authentication flow
    # @param realm [String] realm name (not id!)
    # @param authentication_flow_representation [AuthenticationFlowRepresentation] Authentication flow representation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_flows_post(realm, authentication_flow_representation, opts = {})
      realm_authentication_flows_post_with_http_info(realm, authentication_flow_representation, opts)
      nil
    end

    # Create a new authentication flow
    # @param realm [String] realm name (not id!)
    # @param authentication_flow_representation [AuthenticationFlowRepresentation] Authentication flow representation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_flows_post_with_http_info(realm, authentication_flow_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_flows_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_flows_post"
      end
      # verify the required parameter 'authentication_flow_representation' is set
      if @api_client.config.client_side_validation && authentication_flow_representation.nil?
        fail ArgumentError, "Missing the required parameter 'authentication_flow_representation' when calling AuthenticationManagementApi.realm_authentication_flows_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/flows'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(authentication_flow_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_flows_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get form action providers   Returns a list of form action providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_authentication_form_action_providers_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_form_action_providers_get_with_http_info(realm, opts)
      data
    end

    # Get form action providers   Returns a list of form action providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_authentication_form_action_providers_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_form_action_providers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_form_action_providers_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/form-action-providers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_form_action_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get form providers   Returns a list of form providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_authentication_form_providers_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_form_providers_get_with_http_info(realm, opts)
      data
    end

    # Get form providers   Returns a list of form providers.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_authentication_form_providers_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_form_providers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_form_providers_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/form-providers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_form_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration descriptions for all clients
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def realm_authentication_per_client_config_description_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_per_client_config_description_get_with_http_info(realm, opts)
      data
    end

    # Get configuration descriptions for all clients
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_authentication_per_client_config_description_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_per_client_config_description_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_per_client_config_description_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/per-client-config-description'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_per_client_config_description_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a new required actions
    # @param realm [String] realm name (not id!)
    # @param request_body [Hash<String, Object>] JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_register_required_action_post(realm, request_body, opts = {})
      realm_authentication_register_required_action_post_with_http_info(realm, request_body, opts)
      nil
    end

    # Register a new required actions
    # @param realm [String] realm name (not id!)
    # @param request_body [Hash<String, Object>] JSON containing &#39;providerId&#39;, and &#39;name&#39; attributes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_register_required_action_post_with_http_info(realm, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_register_required_action_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_register_required_action_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling AuthenticationManagementApi.realm_authentication_register_required_action_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/register-required-action'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_register_required_action_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete required action
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_required_actions_alias_delete(realm, _alias, opts = {})
      realm_authentication_required_actions_alias_delete_with_http_info(realm, _alias, opts)
      nil
    end

    # Delete required action
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_required_actions_alias_delete_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_alias_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_delete"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_delete"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_alias_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get required action for alias
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [RequiredActionProviderRepresentation]
    def realm_authentication_required_actions_alias_get(realm, _alias, opts = {})
      data, _status_code, _headers = realm_authentication_required_actions_alias_get_with_http_info(realm, _alias, opts)
      data
    end

    # Get required action for alias
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequiredActionProviderRepresentation, Integer, Hash)>] RequiredActionProviderRepresentation data, response status code and response headers
    def realm_authentication_required_actions_alias_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_alias_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RequiredActionProviderRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_alias_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lower required action’s priority
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_required_actions_alias_lower_priority_post(realm, _alias, opts = {})
      realm_authentication_required_actions_alias_lower_priority_post_with_http_info(realm, _alias, opts)
      nil
    end

    # Lower required action’s priority
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_required_actions_alias_lower_priority_post_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_alias_lower_priority_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_lower_priority_post"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_lower_priority_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions/{alias}/lower-priority'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_alias_lower_priority_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update required action
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param required_action_provider_representation [RequiredActionProviderRepresentation] JSON describing new state of required action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_required_actions_alias_put(realm, _alias, required_action_provider_representation, opts = {})
      realm_authentication_required_actions_alias_put_with_http_info(realm, _alias, required_action_provider_representation, opts)
      nil
    end

    # Update required action
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param required_action_provider_representation [RequiredActionProviderRepresentation] JSON describing new state of required action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_required_actions_alias_put_with_http_info(realm, _alias, required_action_provider_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_alias_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_put"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_put"
      end
      # verify the required parameter 'required_action_provider_representation' is set
      if @api_client.config.client_side_validation && required_action_provider_representation.nil?
        fail ArgumentError, "Missing the required parameter 'required_action_provider_representation' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_put"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(required_action_provider_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_alias_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Raise required action’s priority
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_authentication_required_actions_alias_raise_priority_post(realm, _alias, opts = {})
      realm_authentication_required_actions_alias_raise_priority_post_with_http_info(realm, _alias, opts)
      nil
    end

    # Raise required action’s priority
    # @param realm [String] realm name (not id!)
    # @param _alias [String] Alias of required action
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_authentication_required_actions_alias_raise_priority_post_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_alias_raise_priority_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_raise_priority_post"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling AuthenticationManagementApi.realm_authentication_required_actions_alias_raise_priority_post"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions/{alias}/raise-priority'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_alias_raise_priority_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get required actions   Returns a list of required actions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<RequiredActionProviderRepresentation>]
    def realm_authentication_required_actions_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_required_actions_get_with_http_info(realm, opts)
      data
    end

    # Get required actions   Returns a list of required actions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RequiredActionProviderRepresentation>, Integer, Hash)>] Array<RequiredActionProviderRepresentation> data, response status code and response headers
    def realm_authentication_required_actions_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_required_actions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_required_actions_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/required-actions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RequiredActionProviderRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_required_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get unregistered required actions   Returns a list of unregistered required actions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_authentication_unregistered_required_actions_get(realm, opts = {})
      data, _status_code, _headers = realm_authentication_unregistered_required_actions_get_with_http_info(realm, opts)
      data
    end

    # Get unregistered required actions   Returns a list of unregistered required actions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_authentication_unregistered_required_actions_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AuthenticationManagementApi.realm_authentication_unregistered_required_actions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling AuthenticationManagementApi.realm_authentication_unregistered_required_actions_get"
      end
      # resource path
      local_var_path = '/{realm}/authentication/unregistered-required-actions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationManagementApi#realm_authentication_unregistered_required_actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
