=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class ComponentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :parent 
    # @option opts [String] :type 
    # @return [Array<ComponentRepresentation>]
    def realm_components_get(realm, opts = {})
      data, _status_code, _headers = realm_components_get_with_http_info(realm, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @option opts [String] :parent 
    # @option opts [String] :type 
    # @return [Array<(Array<ComponentRepresentation>, Integer, Hash)>] Array<ComponentRepresentation> data, response status code and response headers
    def realm_components_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_get"
      end
      # resource path
      local_var_path = '/{realm}/components'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'parent'] = opts[:'parent'] if !opts[:'parent'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ComponentRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_components_id_delete(realm, id, opts = {})
      realm_components_id_delete_with_http_info(realm, id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_components_id_delete_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComponentApi.realm_components_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/components/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ComponentRepresentation]
    def realm_components_id_get(realm, id, opts = {})
      data, _status_code, _headers = realm_components_id_get_with_http_info(realm, id, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ComponentRepresentation, Integer, Hash)>] ComponentRepresentation data, response status code and response headers
    def realm_components_id_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComponentApi.realm_components_id_get"
      end
      # resource path
      local_var_path = '/{realm}/components/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ComponentRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param component_representation [ComponentRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_components_id_put(realm, id, component_representation, opts = {})
      realm_components_id_put_with_http_info(realm, id, component_representation, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param component_representation [ComponentRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_components_id_put_with_http_info(realm, id, component_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComponentApi.realm_components_id_put"
      end
      # verify the required parameter 'component_representation' is set
      if @api_client.config.client_side_validation && component_representation.nil?
        fail ArgumentError, "Missing the required parameter 'component_representation' when calling ComponentApi.realm_components_id_put"
      end
      # resource path
      local_var_path = '/{realm}/components/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(component_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of subcomponent types that are available to configure for a particular parent component.
    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<ComponentTypeRepresentation>]
    def realm_components_id_sub_component_types_get(realm, id, opts = {})
      data, _status_code, _headers = realm_components_id_sub_component_types_get_with_http_info(realm, id, opts)
      data
    end

    # List of subcomponent types that are available to configure for a particular parent component.
    # @param realm [String] realm name (not id!)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<(Array<ComponentTypeRepresentation>, Integer, Hash)>] Array<ComponentTypeRepresentation> data, response status code and response headers
    def realm_components_id_sub_component_types_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_id_sub_component_types_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_id_sub_component_types_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComponentApi.realm_components_id_sub_component_types_get"
      end
      # resource path
      local_var_path = '/{realm}/components/{id}/sub-component-types'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ComponentTypeRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_id_sub_component_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param component_representation [ComponentRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_components_post(realm, component_representation, opts = {})
      realm_components_post_with_http_info(realm, component_representation, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param component_representation [ComponentRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_components_post_with_http_info(realm, component_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComponentApi.realm_components_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ComponentApi.realm_components_post"
      end
      # verify the required parameter 'component_representation' is set
      if @api_client.config.client_side_validation && component_representation.nil?
        fail ArgumentError, "Missing the required parameter 'component_representation' when calling ComponentApi.realm_components_post"
      end
      # resource path
      local_var_path = '/{realm}/components'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(component_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComponentApi#realm_components_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
