=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class RealmsAdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete all admin events
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_admin_events_delete(realm, opts = {})
      realm_admin_events_delete_with_http_info(realm, opts)
      nil
    end

    # Delete all admin events
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_admin_events_delete_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_admin_events_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_admin_events_delete"
      end
      # resource path
      local_var_path = '/{realm}/admin-events'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_admin_events_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_client 
    # @option opts [String] :auth_ip_address 
    # @option opts [String] :auth_realm 
    # @option opts [String] :auth_user user id
    # @option opts [String] :date_from 
    # @option opts [String] :date_to 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [Array<String>] :operation_types 
    # @option opts [String] :resource_path 
    # @option opts [Array<String>] :resource_types 
    # @return [Array<AdminEventRepresentation>]
    def realm_admin_events_get(realm, opts = {})
      data, _status_code, _headers = realm_admin_events_get_with_http_info(realm, opts)
      data
    end

    # Get admin events   Returns all admin events, or filters events based on URL query parameters listed here
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_client 
    # @option opts [String] :auth_ip_address 
    # @option opts [String] :auth_realm 
    # @option opts [String] :auth_user user id
    # @option opts [String] :date_from 
    # @option opts [String] :date_to 
    # @option opts [Integer] :first 
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [Array<String>] :operation_types 
    # @option opts [String] :resource_path 
    # @option opts [Array<String>] :resource_types 
    # @return [Array<(Array<AdminEventRepresentation>, Integer, Hash)>] Array<AdminEventRepresentation> data, response status code and response headers
    def realm_admin_events_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_admin_events_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_admin_events_get"
      end
      # resource path
      local_var_path = '/{realm}/admin-events'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authClient'] = opts[:'auth_client'] if !opts[:'auth_client'].nil?
      query_params[:'authIpAddress'] = opts[:'auth_ip_address'] if !opts[:'auth_ip_address'].nil?
      query_params[:'authRealm'] = opts[:'auth_realm'] if !opts[:'auth_realm'].nil?
      query_params[:'authUser'] = opts[:'auth_user'] if !opts[:'auth_user'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'operationTypes'] = @api_client.build_collection_param(opts[:'operation_types'], :multi) if !opts[:'operation_types'].nil?
      query_params[:'resourcePath'] = opts[:'resource_path'] if !opts[:'resource_path'].nil?
      query_params[:'resourceTypes'] = @api_client.build_collection_param(opts[:'resource_types'], :multi) if !opts[:'resource_types'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AdminEventRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_admin_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear cache of external public keys (Public keys of clients or Identity providers)
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clear_keys_cache_post(realm, opts = {})
      realm_clear_keys_cache_post_with_http_info(realm, opts)
      nil
    end

    # Clear cache of external public keys (Public keys of clients or Identity providers)
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clear_keys_cache_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_clear_keys_cache_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_clear_keys_cache_post"
      end
      # resource path
      local_var_path = '/{realm}/clear-keys-cache'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_clear_keys_cache_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear realm cache
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clear_realm_cache_post(realm, opts = {})
      realm_clear_realm_cache_post_with_http_info(realm, opts)
      nil
    end

    # Clear realm cache
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clear_realm_cache_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_clear_realm_cache_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_clear_realm_cache_post"
      end
      # resource path
      local_var_path = '/{realm}/clear-realm-cache'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_clear_realm_cache_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear user cache
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clear_user_cache_post(realm, opts = {})
      realm_clear_user_cache_post_with_http_info(realm, opts)
      nil
    end

    # Clear user cache
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clear_user_cache_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_clear_user_cache_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_clear_user_cache_post"
      end
      # resource path
      local_var_path = '/{realm}/clear-user-cache'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_clear_user_cache_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Base path for importing clients under this realm.
    # @param realm [String] realm name (not id!)
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [ClientRepresentation]
    def realm_client_description_converter_post(realm, body, opts = {})
      data, _status_code, _headers = realm_client_description_converter_post_with_http_info(realm, body, opts)
      data
    end

    # Base path for importing clients under this realm.
    # @param realm [String] realm name (not id!)
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientRepresentation, Integer, Hash)>] ClientRepresentation data, response status code and response headers
    def realm_client_description_converter_post_with_http_info(realm, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_client_description_converter_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_client_description_converter_post"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RealmsAdminApi.realm_client_description_converter_post"
      end
      # resource path
      local_var_path = '/{realm}/client-description-converter'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'ClientRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_client_description_converter_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get client session stats   Returns a JSON map.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Object>>]
    def realm_client_session_stats_get(realm, opts = {})
      data, _status_code, _headers = realm_client_session_stats_get_with_http_info(realm, opts)
      data
    end

    # Get client session stats   Returns a JSON map.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Object>>, Integer, Hash)>] Array<Hash<String, Object>> data, response status code and response headers
    def realm_client_session_stats_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_client_session_stats_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_client_session_stats_get"
      end
      # resource path
      local_var_path = '/{realm}/client-session-stats'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Object>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_client_session_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def realm_credential_registrators_get(realm, opts = {})
      data, _status_code, _headers = realm_credential_registrators_get_with_http_info(realm, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def realm_credential_registrators_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_credential_registrators_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_credential_registrators_get"
      end
      # resource path
      local_var_path = '/{realm}/credential-registrators'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_credential_registrators_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_default_client_scopes_client_scope_id_delete(realm, client_scope_id, opts = {})
      realm_default_default_client_scopes_client_scope_id_delete_with_http_info(realm, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_default_client_scopes_client_scope_id_delete_with_http_info(realm, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/default-default-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_default_client_scopes_client_scope_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_default_client_scopes_client_scope_id_put(realm, client_scope_id, opts = {})
      realm_default_default_client_scopes_client_scope_id_put_with_http_info(realm, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_default_client_scopes_client_scope_id_put_with_http_info(realm, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling RealmsAdminApi.realm_default_default_client_scopes_client_scope_id_put"
      end
      # resource path
      local_var_path = '/{realm}/default-default-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_default_client_scopes_client_scope_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm default client scopes.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<ClientScopeRepresentation>]
    def realm_default_default_client_scopes_get(realm, opts = {})
      data, _status_code, _headers = realm_default_default_client_scopes_get_with_http_info(realm, opts)
      data
    end

    # Get realm default client scopes.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClientScopeRepresentation>, Integer, Hash)>] Array<ClientScopeRepresentation> data, response status code and response headers
    def realm_default_default_client_scopes_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_default_client_scopes_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_default_client_scopes_get"
      end
      # resource path
      local_var_path = '/{realm}/default-default-client-scopes'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientScopeRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_default_client_scopes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group hierarchy.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<GroupRepresentation>]
    def realm_default_groups_get(realm, opts = {})
      data, _status_code, _headers = realm_default_groups_get_with_http_info(realm, opts)
      data
    end

    # Get group hierarchy.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GroupRepresentation>, Integer, Hash)>] Array<GroupRepresentation> data, response status code and response headers
    def realm_default_groups_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_groups_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_groups_get"
      end
      # resource path
      local_var_path = '/{realm}/default-groups'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<GroupRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_groups_group_id_delete(realm, group_id, opts = {})
      realm_default_groups_group_id_delete_with_http_info(realm, group_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_groups_group_id_delete_with_http_info(realm, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_groups_group_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_groups_group_id_delete"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling RealmsAdminApi.realm_default_groups_group_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/default-groups/{groupId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_groups_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_groups_group_id_put(realm, group_id, opts = {})
      realm_default_groups_group_id_put_with_http_info(realm, group_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_groups_group_id_put_with_http_info(realm, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_groups_group_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_groups_group_id_put"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling RealmsAdminApi.realm_default_groups_group_id_put"
      end
      # resource path
      local_var_path = '/{realm}/default-groups/{groupId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_groups_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_optional_client_scopes_client_scope_id_delete(realm, client_scope_id, opts = {})
      realm_default_optional_client_scopes_client_scope_id_delete_with_http_info(realm, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_optional_client_scopes_client_scope_id_delete_with_http_info(realm, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/default-optional-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_optional_client_scopes_client_scope_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_default_optional_client_scopes_client_scope_id_put(realm, client_scope_id, opts = {})
      realm_default_optional_client_scopes_client_scope_id_put_with_http_info(realm, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_default_optional_client_scopes_client_scope_id_put_with_http_info(realm, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling RealmsAdminApi.realm_default_optional_client_scopes_client_scope_id_put"
      end
      # resource path
      local_var_path = '/{realm}/default-optional-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_optional_client_scopes_client_scope_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get realm optional client scopes.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<ClientScopeRepresentation>]
    def realm_default_optional_client_scopes_get(realm, opts = {})
      data, _status_code, _headers = realm_default_optional_client_scopes_get_with_http_info(realm, opts)
      data
    end

    # Get realm optional client scopes.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClientScopeRepresentation>, Integer, Hash)>] Array<ClientScopeRepresentation> data, response status code and response headers
    def realm_default_optional_client_scopes_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_default_optional_client_scopes_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_default_optional_client_scopes_get"
      end
      # resource path
      local_var_path = '/{realm}/default-optional-client-scopes'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientScopeRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_default_optional_client_scopes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the realm
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_delete(realm, opts = {})
      realm_delete_with_http_info(realm, opts)
      nil
    end

    # Delete the realm
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_delete_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_delete"
      end
      # resource path
      local_var_path = '/{realm}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the events provider configuration   Returns JSON object with events provider configuration
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [RealmEventsConfigRepresentation]
    def realm_events_config_get(realm, opts = {})
      data, _status_code, _headers = realm_events_config_get_with_http_info(realm, opts)
      data
    end

    # Get the events provider configuration   Returns JSON object with events provider configuration
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealmEventsConfigRepresentation, Integer, Hash)>] RealmEventsConfigRepresentation data, response status code and response headers
    def realm_events_config_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_events_config_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_events_config_get"
      end
      # resource path
      local_var_path = '/{realm}/events/config'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RealmEventsConfigRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_events_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the events provider   Change the events provider and/or its configuration
    # @param realm [String] realm name (not id!)
    # @param realm_events_config_representation [RealmEventsConfigRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_events_config_put(realm, realm_events_config_representation, opts = {})
      realm_events_config_put_with_http_info(realm, realm_events_config_representation, opts)
      nil
    end

    # Update the events provider   Change the events provider and/or its configuration
    # @param realm [String] realm name (not id!)
    # @param realm_events_config_representation [RealmEventsConfigRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_events_config_put_with_http_info(realm, realm_events_config_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_events_config_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_events_config_put"
      end
      # verify the required parameter 'realm_events_config_representation' is set
      if @api_client.config.client_side_validation && realm_events_config_representation.nil?
        fail ArgumentError, "Missing the required parameter 'realm_events_config_representation' when calling RealmsAdminApi.realm_events_config_put"
      end
      # resource path
      local_var_path = '/{realm}/events/config'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(realm_events_config_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_events_config_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all events
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_events_delete(realm, opts = {})
      realm_events_delete_with_http_info(realm, opts)
      nil
    end

    # Delete all events
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_events_delete_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_events_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_events_delete"
      end
      # resource path
      local_var_path = '/{realm}/events'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_events_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get events   Returns all events, or filters them based on URL query parameters listed here
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client App or oauth client name
    # @option opts [String] :date_from From date
    # @option opts [String] :date_to To date
    # @option opts [Integer] :first Paging offset
    # @option opts [String] :ip_address IP address
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [Array<String>] :type The types of events to return
    # @option opts [String] :user User id
    # @return [Array<EventRepresentation>]
    def realm_events_get(realm, opts = {})
      data, _status_code, _headers = realm_events_get_with_http_info(realm, opts)
      data
    end

    # Get events   Returns all events, or filters them based on URL query parameters listed here
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client App or oauth client name
    # @option opts [String] :date_from From date
    # @option opts [String] :date_to To date
    # @option opts [Integer] :first Paging offset
    # @option opts [String] :ip_address IP address
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @option opts [Array<String>] :type The types of events to return
    # @option opts [String] :user User id
    # @return [Array<(Array<EventRepresentation>, Integer, Hash)>] Array<EventRepresentation> data, response status code and response headers
    def realm_events_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_events_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_events_get"
      end
      # resource path
      local_var_path = '/{realm}/events'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client'] = opts[:'client'] if !opts[:'client'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'ipAddress'] = opts[:'ip_address'] if !opts[:'ip_address'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'type'] = @api_client.build_collection_param(opts[:'type'], :multi) if !opts[:'type'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<EventRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the top-level representation of the realm   It will not include nested information like User and Client representations.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [RealmRepresentation]
    def realm_get(realm, opts = {})
      data, _status_code, _headers = realm_get_with_http_info(realm, opts)
      data
    end

    # Get the top-level representation of the realm   It will not include nested information like User and Client representations.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(RealmRepresentation, Integer, Hash)>] RealmRepresentation data, response status code and response headers
    def realm_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_get"
      end
      # resource path
      local_var_path = '/{realm}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RealmRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [GroupRepresentation]
    def realm_group_by_path_path_get(realm, path, opts = {})
      data, _status_code, _headers = realm_group_by_path_path_get_with_http_info(realm, path, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupRepresentation, Integer, Hash)>] GroupRepresentation data, response status code and response headers
    def realm_group_by_path_path_get_with_http_info(realm, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_group_by_path_path_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_group_by_path_path_get"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling RealmsAdminApi.realm_group_by_path_path_get"
      end
      # resource path
      local_var_path = '/{realm}/group-by-path/{path}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'path' + '}', CGI.escape(path.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GroupRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_group_by_path_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get LDAP supported extensions.
    # @param realm [String] realm name (not id!)
    # @param test_ldap_connection_representation [TestLdapConnectionRepresentation] LDAP configuration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_ldap_server_capabilities_post(realm, test_ldap_connection_representation, opts = {})
      realm_ldap_server_capabilities_post_with_http_info(realm, test_ldap_connection_representation, opts)
      nil
    end

    # Get LDAP supported extensions.
    # @param realm [String] realm name (not id!)
    # @param test_ldap_connection_representation [TestLdapConnectionRepresentation] LDAP configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_ldap_server_capabilities_post_with_http_info(realm, test_ldap_connection_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_ldap_server_capabilities_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_ldap_server_capabilities_post"
      end
      # verify the required parameter 'test_ldap_connection_representation' is set
      if @api_client.config.client_side_validation && test_ldap_connection_representation.nil?
        fail ArgumentError, "Missing the required parameter 'test_ldap_connection_representation' when calling RealmsAdminApi.realm_ldap_server_capabilities_post"
      end
      # resource path
      local_var_path = '/{realm}/ldap-server-capabilities'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(test_ldap_connection_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_ldap_server_capabilities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes all user sessions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_logout_all_post(realm, opts = {})
      realm_logout_all_post_with_http_info(realm, opts)
      nil
    end

    # Removes all user sessions.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_logout_all_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_logout_all_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_logout_all_post"
      end
      # resource path
      local_var_path = '/{realm}/logout-all'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_logout_all_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Partial export of existing realm into a JSON file.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :export_clients 
    # @option opts [Boolean] :export_groups_and_roles 
    # @return [RealmRepresentation]
    def realm_partial_export_post(realm, opts = {})
      data, _status_code, _headers = realm_partial_export_post_with_http_info(realm, opts)
      data
    end

    # Partial export of existing realm into a JSON file.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :export_clients 
    # @option opts [Boolean] :export_groups_and_roles 
    # @return [Array<(RealmRepresentation, Integer, Hash)>] RealmRepresentation data, response status code and response headers
    def realm_partial_export_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_partial_export_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_partial_export_post"
      end
      # resource path
      local_var_path = '/{realm}/partial-export'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exportClients'] = opts[:'export_clients'] if !opts[:'export_clients'].nil?
      query_params[:'exportGroupsAndRoles'] = opts[:'export_groups_and_roles'] if !opts[:'export_groups_and_roles'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RealmRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_partial_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Partial import from a JSON file to an existing realm.
    # @param realm [String] realm name (not id!)
    # @param partial_import_representation [PartialImportRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_partial_import_post(realm, partial_import_representation, opts = {})
      realm_partial_import_post_with_http_info(realm, partial_import_representation, opts)
      nil
    end

    # Partial import from a JSON file to an existing realm.
    # @param realm [String] realm name (not id!)
    # @param partial_import_representation [PartialImportRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_partial_import_post_with_http_info(realm, partial_import_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_partial_import_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_partial_import_post"
      end
      # verify the required parameter 'partial_import_representation' is set
      if @api_client.config.client_side_validation && partial_import_representation.nil?
        fail ArgumentError, "Missing the required parameter 'partial_import_representation' when calling RealmsAdminApi.realm_partial_import_post"
      end
      # resource path
      local_var_path = '/{realm}/partialImport'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(partial_import_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_partial_import_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Push the realm’s revocation policy to any client that has an admin url associated with it.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_push_revocation_post(realm, opts = {})
      realm_push_revocation_post_with_http_info(realm, opts)
      nil
    end

    # Push the realm’s revocation policy to any client that has an admin url associated with it.
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_push_revocation_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_push_revocation_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_push_revocation_post"
      end
      # resource path
      local_var_path = '/{realm}/push-revocation'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_push_revocation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
    # @param realm [String] realm name (not id!)
    # @param realm_representation [RealmRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_put(realm, realm_representation, opts = {})
      realm_put_with_http_info(realm, realm_representation, opts)
      nil
    end

    # Update the top-level information of the realm   Any user, roles or client information in the representation  will be ignored.
    # @param realm [String] realm name (not id!)
    # @param realm_representation [RealmRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_put_with_http_info(realm, realm_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_put"
      end
      # verify the required parameter 'realm_representation' is set
      if @api_client.config.client_side_validation && realm_representation.nil?
        fail ArgumentError, "Missing the required parameter 'realm_representation' when calling RealmsAdminApi.realm_put"
      end
      # resource path
      local_var_path = '/{realm}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(realm_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a specific user session.
    # @param realm [String] realm name (not id!)
    # @param session [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_sessions_session_delete(realm, session, opts = {})
      realm_sessions_session_delete_with_http_info(realm, session, opts)
      nil
    end

    # Remove a specific user session.
    # @param realm [String] realm name (not id!)
    # @param session [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_sessions_session_delete_with_http_info(realm, session, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_sessions_session_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_sessions_session_delete"
      end
      # verify the required parameter 'session' is set
      if @api_client.config.client_side_validation && session.nil?
        fail ArgumentError, "Missing the required parameter 'session' when calling RealmsAdminApi.realm_sessions_session_delete"
      end
      # resource path
      local_var_path = '/{realm}/sessions/{session}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'session' + '}', CGI.escape(session.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_sessions_session_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test LDAP connection
    # @param realm [String] realm name (not id!)
    # @param test_ldap_connection_representation [TestLdapConnectionRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_test_ldap_connection_post(realm, test_ldap_connection_representation, opts = {})
      realm_test_ldap_connection_post_with_http_info(realm, test_ldap_connection_representation, opts)
      nil
    end

    # Test LDAP connection
    # @param realm [String] realm name (not id!)
    # @param test_ldap_connection_representation [TestLdapConnectionRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_test_ldap_connection_post_with_http_info(realm, test_ldap_connection_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_test_ldap_connection_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_test_ldap_connection_post"
      end
      # verify the required parameter 'test_ldap_connection_representation' is set
      if @api_client.config.client_side_validation && test_ldap_connection_representation.nil?
        fail ArgumentError, "Missing the required parameter 'test_ldap_connection_representation' when calling RealmsAdminApi.realm_test_ldap_connection_post"
      end
      # resource path
      local_var_path = '/{realm}/testLDAPConnection'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(test_ldap_connection_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_test_ldap_connection_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_test_smtp_connection_post(realm, request_body, opts = {})
      realm_test_smtp_connection_post_with_http_info(realm, request_body, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_test_smtp_connection_post_with_http_info(realm, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_test_smtp_connection_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_test_smtp_connection_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling RealmsAdminApi.realm_test_smtp_connection_post"
      end
      # resource path
      local_var_path = '/{realm}/testSMTPConnection'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_test_smtp_connection_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_users_management_permissions_get(realm, opts = {})
      data, _status_code, _headers = realm_users_management_permissions_get_with_http_info(realm, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_users_management_permissions_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_users_management_permissions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_users_management_permissions_get"
      end
      # resource path
      local_var_path = '/{realm}/users-management-permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_users_management_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_users_management_permissions_put(realm, management_permission_reference, opts = {})
      data, _status_code, _headers = realm_users_management_permissions_put_with_http_info(realm, management_permission_reference, opts)
      data
    end

    # @param realm [String] realm name (not id!)
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_users_management_permissions_put_with_http_info(realm, management_permission_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.realm_users_management_permissions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling RealmsAdminApi.realm_users_management_permissions_put"
      end
      # verify the required parameter 'management_permission_reference' is set
      if @api_client.config.client_side_validation && management_permission_reference.nil?
        fail ArgumentError, "Missing the required parameter 'management_permission_reference' when calling RealmsAdminApi.realm_users_management_permissions_put"
      end
      # resource path
      local_var_path = '/{realm}/users-management-permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(management_permission_reference) 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#realm_users_management_permissions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import a realm   Imports a realm from a full representation of that realm.
    # @param realm_representation [RealmRepresentation] JSON representation of the realm
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def root_post(realm_representation, opts = {})
      root_post_with_http_info(realm_representation, opts)
      nil
    end

    # Import a realm   Imports a realm from a full representation of that realm.
    # @param realm_representation [RealmRepresentation] JSON representation of the realm
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def root_post_with_http_info(realm_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RealmsAdminApi.root_post ...'
      end
      # verify the required parameter 'realm_representation' is set
      if @api_client.config.client_side_validation && realm_representation.nil?
        fail ArgumentError, "Missing the required parameter 'realm_representation' when calling RealmsAdminApi.root_post"
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(realm_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RealmsAdminApi#root_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
