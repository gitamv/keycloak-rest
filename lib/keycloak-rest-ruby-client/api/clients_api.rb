=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class ClientsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get clients belonging to the realm   Returns a list of clients belonging to the realm
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id filter by clientId
    # @option opts [Integer] :first the first result
    # @option opts [Integer] :max the max results to return
    # @option opts [Boolean] :search whether this is a search query or a getClientById query
    # @option opts [Boolean] :viewable_only filter clients that cannot be viewed in full by admin
    # @return [Array<ClientRepresentation>]
    def realm_clients_get(realm, opts = {})
      data, _status_code, _headers = realm_clients_get_with_http_info(realm, opts)
      data
    end

    # Get clients belonging to the realm   Returns a list of clients belonging to the realm
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id filter by clientId
    # @option opts [Integer] :first the first result
    # @option opts [Integer] :max the max results to return
    # @option opts [Boolean] :search whether this is a search query or a getClientById query
    # @option opts [Boolean] :viewable_only filter clients that cannot be viewed in full by admin
    # @return [Array<(Array<ClientRepresentation>, Integer, Hash)>] Array<ClientRepresentation> data, response status code and response headers
    def realm_clients_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_get"
      end
      # resource path
      local_var_path = '/{realm}/clients'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'clientId'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'viewableOnly'] = opts[:'viewable_only'] if !opts[:'viewable_only'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the client secret
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [CredentialRepresentation]
    def realm_clients_id_client_secret_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_client_secret_get_with_http_info(realm, id, opts)
      data
    end

    # Get the client secret
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialRepresentation, Integer, Hash)>] CredentialRepresentation data, response status code and response headers
    def realm_clients_id_client_secret_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_client_secret_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_client_secret_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_client_secret_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/client-secret'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CredentialRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_client_secret_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a new secret for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [CredentialRepresentation]
    def realm_clients_id_client_secret_post(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_client_secret_post_with_http_info(realm, id, opts)
      data
    end

    # Generate a new secret for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialRepresentation, Integer, Hash)>] CredentialRepresentation data, response status code and response headers
    def realm_clients_id_client_secret_post_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_client_secret_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_client_secret_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_client_secret_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/client-secret'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CredentialRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_client_secret_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_default_client_scopes_client_scope_id_delete(realm, id, client_scope_id, opts = {})
      realm_clients_id_default_client_scopes_client_scope_id_delete_with_http_info(realm, id, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_default_client_scopes_client_scope_id_delete_with_http_info(realm, id, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_default_client_scopes_client_scope_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_default_client_scopes_client_scope_id_put(realm, id, client_scope_id, opts = {})
      realm_clients_id_default_client_scopes_client_scope_id_put_with_http_info(realm, id, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_default_client_scopes_client_scope_id_put_with_http_info(realm, id, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling ClientsApi.realm_clients_id_default_client_scopes_client_scope_id_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_default_client_scopes_client_scope_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default client scopes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<ClientScopeRepresentation>]
    def realm_clients_id_default_client_scopes_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_default_client_scopes_get_with_http_info(realm, id, opts)
      data
    end

    # Get default client scopes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClientScopeRepresentation>, Integer, Hash)>] Array<ClientScopeRepresentation> data, response status code and response headers
    def realm_clients_id_default_client_scopes_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_default_client_scopes_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_default_client_scopes_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_default_client_scopes_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/default-client-scopes'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientScopeRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_default_client_scopes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_delete(realm, id, opts = {})
      realm_clients_id_delete_with_http_info(realm, id, opts)
      nil
    end

    # Delete the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_delete_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create JSON with payload of example access token
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @option opts [String] :user_id 
    # @return [AccessToken]
    def realm_clients_id_evaluate_scopes_generate_example_access_token_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_evaluate_scopes_generate_example_access_token_get_with_http_info(realm, id, opts)
      data
    end

    # Create JSON with payload of example access token
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @option opts [String] :user_id 
    # @return [Array<(AccessToken, Integer, Hash)>] AccessToken data, response status code and response headers
    def realm_clients_id_evaluate_scopes_generate_example_access_token_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_evaluate_scopes_generate_example_access_token_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_evaluate_scopes_generate_example_access_token_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_evaluate_scopes_generate_example_access_token_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AccessToken' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_evaluate_scopes_generate_example_access_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>]
    def realm_clients_id_evaluate_scopes_protocol_mappers_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_evaluate_scopes_protocol_mappers_get_with_http_info(realm, id, opts)
      data
    end

    # Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<(Array<ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>, Integer, Hash)>] Array<ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation> data, response status code and response headers
    def realm_clients_id_evaluate_scopes_protocol_mappers_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_evaluate_scopes_protocol_mappers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_evaluate_scopes_protocol_mappers_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_evaluate_scopes_protocol_mappers_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_evaluate_scopes_protocol_mappers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_container_id [String] either realm name OR client UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get(realm, id, role_container_id, opts = {})
      data, _status_code, _headers = realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get_with_http_info(realm, id, role_container_id, opts)
      data
    end

    # Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_container_id [String] either realm name OR client UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get_with_http_info(realm, id, role_container_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get"
      end
      # verify the required parameter 'role_container_id' is set
      if @api_client.config.client_side_validation && role_container_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_container_id' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'roleContainerId' + '}', CGI.escape(role_container_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_granted_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_container_id [String] either realm name OR client UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<RoleRepresentation>]
    def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get(realm, id, role_container_id, opts = {})
      data, _status_code, _headers = realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get_with_http_info(realm, id, role_container_id, opts)
      data
    end

    # Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param role_container_id [String] either realm name OR client UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope 
    # @return [Array<(Array<RoleRepresentation>, Integer, Hash)>] Array<RoleRepresentation> data, response status code and response headers
    def realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get_with_http_info(realm, id, role_container_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get"
      end
      # verify the required parameter 'role_container_id' is set
      if @api_client.config.client_side_validation && role_container_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_container_id' when calling ClientsApi.realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'roleContainerId' + '}', CGI.escape(role_container_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RoleRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_evaluate_scopes_scope_mappings_role_container_id_not_granted_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get representation of the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [ClientRepresentation]
    def realm_clients_id_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_get_with_http_info(realm, id, opts)
      data
    end

    # Get representation of the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientRepresentation, Integer, Hash)>] ClientRepresentation data, response status code and response headers
    def realm_clients_id_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ClientRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param provider_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_installation_providers_provider_id_get(realm, id, provider_id, opts = {})
      realm_clients_id_installation_providers_provider_id_get_with_http_info(realm, id, provider_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param provider_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_installation_providers_provider_id_get_with_http_info(realm, id, provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_installation_providers_provider_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_installation_providers_provider_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_installation_providers_provider_id_get"
      end
      # verify the required parameter 'provider_id' is set
      if @api_client.config.client_side_validation && provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'provider_id' when calling ClientsApi.realm_clients_id_installation_providers_provider_id_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/installation/providers/{providerId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'providerId' + '}', CGI.escape(provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_installation_providers_provider_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_clients_id_management_permissions_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_management_permissions_get_with_http_info(realm, id, opts)
      data
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_clients_id_management_permissions_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_management_permissions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_management_permissions_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_management_permissions_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_management_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_clients_id_management_permissions_put(realm, id, management_permission_reference, opts = {})
      data, _status_code, _headers = realm_clients_id_management_permissions_put_with_http_info(realm, id, management_permission_reference, opts)
      data
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_clients_id_management_permissions_put_with_http_info(realm, id, management_permission_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_management_permissions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_management_permissions_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_management_permissions_put"
      end
      # verify the required parameter 'management_permission_reference' is set
      if @api_client.config.client_side_validation && management_permission_reference.nil?
        fail ArgumentError, "Missing the required parameter 'management_permission_reference' when calling ClientsApi.realm_clients_id_management_permissions_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(management_permission_reference) 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_management_permissions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unregister a cluster node from the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param node [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_nodes_node_delete(realm, id, node, opts = {})
      realm_clients_id_nodes_node_delete_with_http_info(realm, id, node, opts)
      nil
    end

    # Unregister a cluster node from the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param node [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_nodes_node_delete_with_http_info(realm, id, node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_nodes_node_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_nodes_node_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_nodes_node_delete"
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling ClientsApi.realm_clients_id_nodes_node_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/nodes/{node}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'node' + '}', CGI.escape(node.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_nodes_node_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_nodes_post(realm, id, request_body, opts = {})
      realm_clients_id_nodes_post_with_http_info(realm, id, request_body, opts)
      nil
    end

    # Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_nodes_post_with_http_info(realm, id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_nodes_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_nodes_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_nodes_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling ClientsApi.realm_clients_id_nodes_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/nodes'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_nodes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get application offline session count   Returns a number of offline user sessions associated with this client   {      \"count\": number  }
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def realm_clients_id_offline_session_count_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_offline_session_count_get_with_http_info(realm, id, opts)
      data
    end

    # Get application offline session count   Returns a number of offline user sessions associated with this client   {      \&quot;count\&quot;: number  }
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_clients_id_offline_session_count_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_offline_session_count_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_offline_session_count_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_offline_session_count_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/offline-session-count'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_offline_session_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get offline sessions for client   Returns a list of offline user sessions associated with this client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first Paging offset
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @return [Array<UserSessionRepresentation>]
    def realm_clients_id_offline_sessions_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_offline_sessions_get_with_http_info(realm, id, opts)
      data
    end

    # Get offline sessions for client   Returns a list of offline user sessions associated with this client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first Paging offset
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @return [Array<(Array<UserSessionRepresentation>, Integer, Hash)>] Array<UserSessionRepresentation> data, response status code and response headers
    def realm_clients_id_offline_sessions_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_offline_sessions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_offline_sessions_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_offline_sessions_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/offline-sessions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserSessionRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_offline_sessions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_optional_client_scopes_client_scope_id_delete(realm, id, client_scope_id, opts = {})
      realm_clients_id_optional_client_scopes_client_scope_id_delete_with_http_info(realm, id, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_optional_client_scopes_client_scope_id_delete_with_http_info(realm, id, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_delete"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_optional_client_scopes_client_scope_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_optional_client_scopes_client_scope_id_put(realm, id, client_scope_id, opts = {})
      realm_clients_id_optional_client_scopes_client_scope_id_put_with_http_info(realm, id, client_scope_id, opts)
      nil
    end

    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_scope_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_optional_client_scopes_client_scope_id_put_with_http_info(realm, id, client_scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_put"
      end
      # verify the required parameter 'client_scope_id' is set
      if @api_client.config.client_side_validation && client_scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_scope_id' when calling ClientsApi.realm_clients_id_optional_client_scopes_client_scope_id_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'clientScopeId' + '}', CGI.escape(client_scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_optional_client_scopes_client_scope_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get optional client scopes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<ClientScopeRepresentation>]
    def realm_clients_id_optional_client_scopes_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_optional_client_scopes_get_with_http_info(realm, id, opts)
      data
    end

    # Get optional client scopes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ClientScopeRepresentation>, Integer, Hash)>] Array<ClientScopeRepresentation> data, response status code and response headers
    def realm_clients_id_optional_client_scopes_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_optional_client_scopes_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_optional_client_scopes_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_optional_client_scopes_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/optional-client-scopes'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ClientScopeRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_optional_client_scopes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [GlobalRequestResult]
    def realm_clients_id_push_revocation_post(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_push_revocation_post_with_http_info(realm, id, opts)
      data
    end

    # Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalRequestResult, Integer, Hash)>] GlobalRequestResult data, response status code and response headers
    def realm_clients_id_push_revocation_post_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_push_revocation_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_push_revocation_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_push_revocation_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/push-revocation'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GlobalRequestResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_push_revocation_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_representation [ClientRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_id_put(realm, id, client_representation, opts = {})
      realm_clients_id_put_with_http_info(realm, id, client_representation, opts)
      nil
    end

    # Update the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param client_representation [ClientRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_id_put_with_http_info(realm, id, client_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_put"
      end
      # verify the required parameter 'client_representation' is set
      if @api_client.config.client_side_validation && client_representation.nil?
        fail ArgumentError, "Missing the required parameter 'client_representation' when calling ClientsApi.realm_clients_id_put"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(client_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a new registration access token for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [ClientRepresentation]
    def realm_clients_id_registration_access_token_post(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_registration_access_token_post_with_http_info(realm, id, opts)
      data
    end

    # Generate a new registration access token for the client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientRepresentation, Integer, Hash)>] ClientRepresentation data, response status code and response headers
    def realm_clients_id_registration_access_token_post_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_registration_access_token_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_registration_access_token_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_registration_access_token_post"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/registration-access-token'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ClientRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_registration_access_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user dedicated to the service account
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [UserRepresentation]
    def realm_clients_id_service_account_user_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_service_account_user_get_with_http_info(realm, id, opts)
      data
    end

    # Get a user dedicated to the service account
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRepresentation, Integer, Hash)>] UserRepresentation data, response status code and response headers
    def realm_clients_id_service_account_user_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_service_account_user_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_service_account_user_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_service_account_user_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/service-account-user'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UserRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_service_account_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get application session count   Returns a number of user sessions associated with this client   {      \"count\": number  }
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def realm_clients_id_session_count_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_session_count_get_with_http_info(realm, id, opts)
      data
    end

    # Get application session count   Returns a number of user sessions associated with this client   {      \&quot;count\&quot;: number  }
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_clients_id_session_count_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_session_count_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_session_count_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_session_count_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/session-count'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_session_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [GlobalRequestResult]
    def realm_clients_id_test_nodes_available_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_test_nodes_available_get_with_http_info(realm, id, opts)
      data
    end

    # Test if registered cluster nodes are available   Tests availability by sending &#39;ping&#39; request to all cluster nodes.
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @return [Array<(GlobalRequestResult, Integer, Hash)>] GlobalRequestResult data, response status code and response headers
    def realm_clients_id_test_nodes_available_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_test_nodes_available_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_test_nodes_available_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_test_nodes_available_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/test-nodes-available'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GlobalRequestResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_test_nodes_available_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user sessions for client   Returns a list of user sessions associated with this client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first Paging offset
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @return [Array<UserSessionRepresentation>]
    def realm_clients_id_user_sessions_get(realm, id, opts = {})
      data, _status_code, _headers = realm_clients_id_user_sessions_get_with_http_info(realm, id, opts)
      data
    end

    # Get user sessions for client   Returns a list of user sessions associated with this client
    # @param realm [String] realm name (not id!)
    # @param id [String] id of client (not client-id)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :first Paging offset
    # @option opts [Integer] :max Maximum results size (defaults to 100)
    # @return [Array<(Array<UserSessionRepresentation>, Integer, Hash)>] Array<UserSessionRepresentation> data, response status code and response headers
    def realm_clients_id_user_sessions_get_with_http_info(realm, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_id_user_sessions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_id_user_sessions_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ClientsApi.realm_clients_id_user_sessions_get"
      end
      # resource path
      local_var_path = '/{realm}/clients/{id}/user-sessions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'first'] = opts[:'first'] if !opts[:'first'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserSessionRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_id_user_sessions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new client   Client’s client_id must be unique!
    # @param realm [String] realm name (not id!)
    # @param client_representation [ClientRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_clients_post(realm, client_representation, opts = {})
      realm_clients_post_with_http_info(realm, client_representation, opts)
      nil
    end

    # Create a new client   Client’s client_id must be unique!
    # @param realm [String] realm name (not id!)
    # @param client_representation [ClientRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_clients_post_with_http_info(realm, client_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientsApi.realm_clients_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling ClientsApi.realm_clients_post"
      end
      # verify the required parameter 'client_representation' is set
      if @api_client.config.client_side_validation && client_representation.nil?
        fail ArgumentError, "Missing the required parameter 'client_representation' when calling ClientsApi.realm_clients_post"
      end
      # resource path
      local_var_path = '/{realm}/clients'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(client_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientsApi#realm_clients_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
