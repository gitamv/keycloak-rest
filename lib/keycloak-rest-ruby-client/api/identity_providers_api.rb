=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module KeycloakRest
  class IdentityProvidersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Import identity provider from uploaded JSON file
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def realm_identity_provider_import_config_post(realm, opts = {})
      data, _status_code, _headers = realm_identity_provider_import_config_post_with_http_info(realm, opts)
      data
    end

    # Import identity provider from uploaded JSON file
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def realm_identity_provider_import_config_post_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_import_config_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_import_config_post"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/import-config'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Object>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_import_config_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_delete(realm, _alias, opts = {})
      realm_identity_provider_instances_alias_delete_with_http_info(realm, _alias, opts)
      nil
    end

    # Delete the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_delete_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_delete"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_delete"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export public broker configuration for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Format to use
    # @return [nil]
    def realm_identity_provider_instances_alias_export_get(realm, _alias, opts = {})
      realm_identity_provider_instances_alias_export_get_with_http_info(realm, _alias, opts)
      nil
    end

    # Export public broker configuration for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Format to use
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_export_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_export_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_export_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_export_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/export'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_export_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderRepresentation]
    def realm_identity_provider_instances_alias_get(realm, _alias, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_alias_get_with_http_info(realm, _alias, opts)
      data
    end

    # Get the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderRepresentation, Integer, Hash)>] IdentityProviderRepresentation data, response status code and response headers
    def realm_identity_provider_instances_alias_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IdentityProviderRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_identity_provider_instances_alias_management_permissions_get(realm, _alias, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_alias_management_permissions_get_with_http_info(realm, _alias, opts)
      data
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_identity_provider_instances_alias_management_permissions_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_management_permissions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [ManagementPermissionReference]
    def realm_identity_provider_instances_alias_management_permissions_put(realm, _alias, management_permission_reference, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_alias_management_permissions_put_with_http_info(realm, _alias, management_permission_reference, opts)
      data
    end

    # Return object stating whether client Authorization permissions have been initialized or not and a reference
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param management_permission_reference [ManagementPermissionReference] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManagementPermissionReference, Integer, Hash)>] ManagementPermissionReference data, response status code and response headers
    def realm_identity_provider_instances_alias_management_permissions_put_with_http_info(realm, _alias, management_permission_reference, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_put"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_put"
      end
      # verify the required parameter 'management_permission_reference' is set
      if @api_client.config.client_side_validation && management_permission_reference.nil?
        fail ArgumentError, "Missing the required parameter 'management_permission_reference' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_management_permissions_put"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/management/permissions'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(management_permission_reference) 

      # return_type
      return_type = opts[:return_type] || 'ManagementPermissionReference' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_management_permissions_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mapper types for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_mapper_types_get(realm, _alias, opts = {})
      realm_identity_provider_instances_alias_mapper_types_get_with_http_info(realm, _alias, opts)
      nil
    end

    # Get mapper types for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_mapper_types_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mapper_types_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mapper_types_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mapper_types_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mapper-types'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mapper_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappers for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<IdentityProviderMapperRepresentation>]
    def realm_identity_provider_instances_alias_mappers_get(realm, _alias, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_alias_mappers_get_with_http_info(realm, _alias, opts)
      data
    end

    # Get mappers for identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<IdentityProviderMapperRepresentation>, Integer, Hash)>] Array<IdentityProviderMapperRepresentation> data, response status code and response headers
    def realm_identity_provider_instances_alias_mappers_get_with_http_info(realm, _alias, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mappers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<IdentityProviderMapperRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mappers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a mapper for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_mappers_id_delete(realm, _alias, id, opts = {})
      realm_identity_provider_instances_alias_mappers_id_delete_with_http_info(realm, _alias, id, opts)
      nil
    end

    # Delete a mapper for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_mappers_id_delete_with_http_info(realm, _alias, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_delete ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_delete"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_delete"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mappers/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mappers_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mapper by id for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param [Hash] opts the optional parameters
    # @return [IdentityProviderMapperRepresentation]
    def realm_identity_provider_instances_alias_mappers_id_get(realm, _alias, id, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_alias_mappers_id_get_with_http_info(realm, _alias, id, opts)
      data
    end

    # Get mapper by id for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentityProviderMapperRepresentation, Integer, Hash)>] IdentityProviderMapperRepresentation data, response status code and response headers
    def realm_identity_provider_instances_alias_mappers_id_get_with_http_info(realm, _alias, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_get"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mappers/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'IdentityProviderMapperRepresentation' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mappers_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a mapper for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param identity_provider_mapper_representation [IdentityProviderMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_mappers_id_put(realm, _alias, id, identity_provider_mapper_representation, opts = {})
      realm_identity_provider_instances_alias_mappers_id_put_with_http_info(realm, _alias, id, identity_provider_mapper_representation, opts)
      nil
    end

    # Update a mapper for the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param id [String] Mapper id
    # @param identity_provider_mapper_representation [IdentityProviderMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_mappers_id_put_with_http_info(realm, _alias, id, identity_provider_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_put"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_put"
      end
      # verify the required parameter 'identity_provider_mapper_representation' is set
      if @api_client.config.client_side_validation && identity_provider_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'identity_provider_mapper_representation' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_id_put"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mappers/{id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(identity_provider_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mappers_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a mapper to identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param identity_provider_mapper_representation [IdentityProviderMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_mappers_post(realm, _alias, identity_provider_mapper_representation, opts = {})
      realm_identity_provider_instances_alias_mappers_post_with_http_info(realm, _alias, identity_provider_mapper_representation, opts)
      nil
    end

    # Add a mapper to identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param identity_provider_mapper_representation [IdentityProviderMapperRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_mappers_post_with_http_info(realm, _alias, identity_provider_mapper_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_post"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_post"
      end
      # verify the required parameter 'identity_provider_mapper_representation' is set
      if @api_client.config.client_side_validation && identity_provider_mapper_representation.nil?
        fail ArgumentError, "Missing the required parameter 'identity_provider_mapper_representation' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_mappers_post"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}/mappers'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(identity_provider_mapper_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_mappers_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param identity_provider_representation [IdentityProviderRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_alias_put(realm, _alias, identity_provider_representation, opts = {})
      realm_identity_provider_instances_alias_put_with_http_info(realm, _alias, identity_provider_representation, opts)
      nil
    end

    # Update the identity provider
    # @param realm [String] realm name (not id!)
    # @param _alias [String] 
    # @param identity_provider_representation [IdentityProviderRepresentation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_alias_put_with_http_info(realm, _alias, identity_provider_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_alias_put ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_put"
      end
      # verify the required parameter '_alias' is set
      if @api_client.config.client_side_validation && _alias.nil?
        fail ArgumentError, "Missing the required parameter '_alias' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_put"
      end
      # verify the required parameter 'identity_provider_representation' is set
      if @api_client.config.client_side_validation && identity_provider_representation.nil?
        fail ArgumentError, "Missing the required parameter 'identity_provider_representation' when calling IdentityProvidersApi.realm_identity_provider_instances_alias_put"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances/{alias}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'alias' + '}', CGI.escape(_alias.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(identity_provider_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_alias_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get identity providers
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<IdentityProviderRepresentation>]
    def realm_identity_provider_instances_get(realm, opts = {})
      data, _status_code, _headers = realm_identity_provider_instances_get_with_http_info(realm, opts)
      data
    end

    # Get identity providers
    # @param realm [String] realm name (not id!)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<IdentityProviderRepresentation>, Integer, Hash)>] Array<IdentityProviderRepresentation> data, response status code and response headers
    def realm_identity_provider_instances_get_with_http_info(realm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<IdentityProviderRepresentation>' 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new identity provider
    # @param realm [String] realm name (not id!)
    # @param identity_provider_representation [IdentityProviderRepresentation] JSON body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_instances_post(realm, identity_provider_representation, opts = {})
      realm_identity_provider_instances_post_with_http_info(realm, identity_provider_representation, opts)
      nil
    end

    # Create a new identity provider
    # @param realm [String] realm name (not id!)
    # @param identity_provider_representation [IdentityProviderRepresentation] JSON body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_instances_post_with_http_info(realm, identity_provider_representation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_instances_post ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_instances_post"
      end
      # verify the required parameter 'identity_provider_representation' is set
      if @api_client.config.client_side_validation && identity_provider_representation.nil?
        fail ArgumentError, "Missing the required parameter 'identity_provider_representation' when calling IdentityProvidersApi.realm_identity_provider_instances_post"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/instances'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(identity_provider_representation) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_instances_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get identity providers
    # @param realm [String] realm name (not id!)
    # @param provider_id [String] Provider id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def realm_identity_provider_providers_provider_id_get(realm, provider_id, opts = {})
      realm_identity_provider_providers_provider_id_get_with_http_info(realm, provider_id, opts)
      nil
    end

    # Get identity providers
    # @param realm [String] realm name (not id!)
    # @param provider_id [String] Provider id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def realm_identity_provider_providers_provider_id_get_with_http_info(realm, provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityProvidersApi.realm_identity_provider_providers_provider_id_get ...'
      end
      # verify the required parameter 'realm' is set
      if @api_client.config.client_side_validation && realm.nil?
        fail ArgumentError, "Missing the required parameter 'realm' when calling IdentityProvidersApi.realm_identity_provider_providers_provider_id_get"
      end
      # verify the required parameter 'provider_id' is set
      if @api_client.config.client_side_validation && provider_id.nil?
        fail ArgumentError, "Missing the required parameter 'provider_id' when calling IdentityProvidersApi.realm_identity_provider_providers_provider_id_get"
      end
      # resource path
      local_var_path = '/{realm}/identity-provider/providers/{provider_id}'.sub('{' + 'realm' + '}', CGI.escape(realm.to_s)).sub('{' + 'provider_id' + '}', CGI.escape(provider_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['access_token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityProvidersApi#realm_identity_provider_providers_provider_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
