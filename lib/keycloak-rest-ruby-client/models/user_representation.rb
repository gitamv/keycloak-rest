=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakRest
  class UserRepresentation
    attr_accessor :access

    attr_accessor :attributes

    attr_accessor :client_consents

    attr_accessor :client_roles

    attr_accessor :created_timestamp

    attr_accessor :credentials

    attr_accessor :disableable_credential_types

    attr_accessor :email

    attr_accessor :email_verified

    attr_accessor :enabled

    attr_accessor :federated_identities

    attr_accessor :federation_link

    attr_accessor :first_name

    attr_accessor :groups

    attr_accessor :id

    attr_accessor :last_name

    attr_accessor :not_before

    attr_accessor :origin

    attr_accessor :realm_roles

    attr_accessor :required_actions

    attr_accessor :_self

    attr_accessor :service_account_client_id

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access' => :'access',
        :'attributes' => :'attributes',
        :'client_consents' => :'clientConsents',
        :'client_roles' => :'clientRoles',
        :'created_timestamp' => :'createdTimestamp',
        :'credentials' => :'credentials',
        :'disableable_credential_types' => :'disableableCredentialTypes',
        :'email' => :'email',
        :'email_verified' => :'emailVerified',
        :'enabled' => :'enabled',
        :'federated_identities' => :'federatedIdentities',
        :'federation_link' => :'federationLink',
        :'first_name' => :'firstName',
        :'groups' => :'groups',
        :'id' => :'id',
        :'last_name' => :'lastName',
        :'not_before' => :'notBefore',
        :'origin' => :'origin',
        :'realm_roles' => :'realmRoles',
        :'required_actions' => :'requiredActions',
        :'_self' => :'self',
        :'service_account_client_id' => :'serviceAccountClientId',
        :'username' => :'username'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access' => :'Hash<String, Object>',
        :'attributes' => :'Hash<String, Object>',
        :'client_consents' => :'Array<UserConsentRepresentation>',
        :'client_roles' => :'Hash<String, Object>',
        :'created_timestamp' => :'Integer',
        :'credentials' => :'Array<CredentialRepresentation>',
        :'disableable_credential_types' => :'Array<String>',
        :'email' => :'String',
        :'email_verified' => :'Boolean',
        :'enabled' => :'Boolean',
        :'federated_identities' => :'Array<FederatedIdentityRepresentation>',
        :'federation_link' => :'String',
        :'first_name' => :'String',
        :'groups' => :'Array<String>',
        :'id' => :'String',
        :'last_name' => :'String',
        :'not_before' => :'Integer',
        :'origin' => :'String',
        :'realm_roles' => :'Array<String>',
        :'required_actions' => :'Array<String>',
        :'_self' => :'String',
        :'service_account_client_id' => :'String',
        :'username' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakRest::UserRepresentation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakRest::UserRepresentation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access')
        if (value = attributes[:'access']).is_a?(Hash)
          self.access = value
        end
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Hash)
          self.attributes = value
        end
      end

      if attributes.key?(:'client_consents')
        if (value = attributes[:'client_consents']).is_a?(Array)
          self.client_consents = value
        end
      end

      if attributes.key?(:'client_roles')
        if (value = attributes[:'client_roles']).is_a?(Hash)
          self.client_roles = value
        end
      end

      if attributes.key?(:'created_timestamp')
        self.created_timestamp = attributes[:'created_timestamp']
      end

      if attributes.key?(:'credentials')
        if (value = attributes[:'credentials']).is_a?(Array)
          self.credentials = value
        end
      end

      if attributes.key?(:'disableable_credential_types')
        if (value = attributes[:'disableable_credential_types']).is_a?(Array)
          self.disableable_credential_types = value
        end
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_verified')
        self.email_verified = attributes[:'email_verified']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'federated_identities')
        if (value = attributes[:'federated_identities']).is_a?(Array)
          self.federated_identities = value
        end
      end

      if attributes.key?(:'federation_link')
        self.federation_link = attributes[:'federation_link']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'not_before')
        self.not_before = attributes[:'not_before']
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'realm_roles')
        if (value = attributes[:'realm_roles']).is_a?(Array)
          self.realm_roles = value
        end
      end

      if attributes.key?(:'required_actions')
        if (value = attributes[:'required_actions']).is_a?(Array)
          self.required_actions = value
        end
      end

      if attributes.key?(:'_self')
        self._self = attributes[:'_self']
      end

      if attributes.key?(:'service_account_client_id')
        self.service_account_client_id = attributes[:'service_account_client_id']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access == o.access &&
          attributes == o.attributes &&
          client_consents == o.client_consents &&
          client_roles == o.client_roles &&
          created_timestamp == o.created_timestamp &&
          credentials == o.credentials &&
          disableable_credential_types == o.disableable_credential_types &&
          email == o.email &&
          email_verified == o.email_verified &&
          enabled == o.enabled &&
          federated_identities == o.federated_identities &&
          federation_link == o.federation_link &&
          first_name == o.first_name &&
          groups == o.groups &&
          id == o.id &&
          last_name == o.last_name &&
          not_before == o.not_before &&
          origin == o.origin &&
          realm_roles == o.realm_roles &&
          required_actions == o.required_actions &&
          _self == o._self &&
          service_account_client_id == o.service_account_client_id &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access, attributes, client_consents, client_roles, created_timestamp, credentials, disableable_credential_types, email, email_verified, enabled, federated_identities, federation_link, first_name, groups, id, last_name, not_before, origin, realm_roles, required_actions, _self, service_account_client_id, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakRest.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
