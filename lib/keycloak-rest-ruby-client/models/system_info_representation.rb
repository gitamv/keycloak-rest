=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakRest
  class SystemInfoRepresentation
    attr_accessor :file_encoding

    attr_accessor :java_home

    attr_accessor :java_runtime

    attr_accessor :java_vendor

    attr_accessor :java_version

    attr_accessor :java_vm

    attr_accessor :java_vm_version

    attr_accessor :os_architecture

    attr_accessor :os_name

    attr_accessor :os_version

    attr_accessor :server_time

    attr_accessor :uptime

    attr_accessor :uptime_millis

    attr_accessor :user_dir

    attr_accessor :user_locale

    attr_accessor :user_name

    attr_accessor :user_timezone

    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_encoding' => :'fileEncoding',
        :'java_home' => :'javaHome',
        :'java_runtime' => :'javaRuntime',
        :'java_vendor' => :'javaVendor',
        :'java_version' => :'javaVersion',
        :'java_vm' => :'javaVm',
        :'java_vm_version' => :'javaVmVersion',
        :'os_architecture' => :'osArchitecture',
        :'os_name' => :'osName',
        :'os_version' => :'osVersion',
        :'server_time' => :'serverTime',
        :'uptime' => :'uptime',
        :'uptime_millis' => :'uptimeMillis',
        :'user_dir' => :'userDir',
        :'user_locale' => :'userLocale',
        :'user_name' => :'userName',
        :'user_timezone' => :'userTimezone',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'file_encoding' => :'String',
        :'java_home' => :'String',
        :'java_runtime' => :'String',
        :'java_vendor' => :'String',
        :'java_version' => :'String',
        :'java_vm' => :'String',
        :'java_vm_version' => :'String',
        :'os_architecture' => :'String',
        :'os_name' => :'String',
        :'os_version' => :'String',
        :'server_time' => :'String',
        :'uptime' => :'String',
        :'uptime_millis' => :'Integer',
        :'user_dir' => :'String',
        :'user_locale' => :'String',
        :'user_name' => :'String',
        :'user_timezone' => :'String',
        :'version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakRest::SystemInfoRepresentation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakRest::SystemInfoRepresentation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'file_encoding')
        self.file_encoding = attributes[:'file_encoding']
      end

      if attributes.key?(:'java_home')
        self.java_home = attributes[:'java_home']
      end

      if attributes.key?(:'java_runtime')
        self.java_runtime = attributes[:'java_runtime']
      end

      if attributes.key?(:'java_vendor')
        self.java_vendor = attributes[:'java_vendor']
      end

      if attributes.key?(:'java_version')
        self.java_version = attributes[:'java_version']
      end

      if attributes.key?(:'java_vm')
        self.java_vm = attributes[:'java_vm']
      end

      if attributes.key?(:'java_vm_version')
        self.java_vm_version = attributes[:'java_vm_version']
      end

      if attributes.key?(:'os_architecture')
        self.os_architecture = attributes[:'os_architecture']
      end

      if attributes.key?(:'os_name')
        self.os_name = attributes[:'os_name']
      end

      if attributes.key?(:'os_version')
        self.os_version = attributes[:'os_version']
      end

      if attributes.key?(:'server_time')
        self.server_time = attributes[:'server_time']
      end

      if attributes.key?(:'uptime')
        self.uptime = attributes[:'uptime']
      end

      if attributes.key?(:'uptime_millis')
        self.uptime_millis = attributes[:'uptime_millis']
      end

      if attributes.key?(:'user_dir')
        self.user_dir = attributes[:'user_dir']
      end

      if attributes.key?(:'user_locale')
        self.user_locale = attributes[:'user_locale']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'user_timezone')
        self.user_timezone = attributes[:'user_timezone']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_encoding == o.file_encoding &&
          java_home == o.java_home &&
          java_runtime == o.java_runtime &&
          java_vendor == o.java_vendor &&
          java_version == o.java_version &&
          java_vm == o.java_vm &&
          java_vm_version == o.java_vm_version &&
          os_architecture == o.os_architecture &&
          os_name == o.os_name &&
          os_version == o.os_version &&
          server_time == o.server_time &&
          uptime == o.uptime &&
          uptime_millis == o.uptime_millis &&
          user_dir == o.user_dir &&
          user_locale == o.user_locale &&
          user_name == o.user_name &&
          user_timezone == o.user_timezone &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [file_encoding, java_home, java_runtime, java_vendor, java_version, java_vm, java_vm_version, os_architecture, os_name, os_version, server_time, uptime, uptime_millis, user_dir, user_locale, user_name, user_timezone, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakRest.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
