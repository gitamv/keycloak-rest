=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakRest
  class ServerInfoRepresentation
    attr_accessor :builtin_protocol_mappers

    attr_accessor :client_importers

    attr_accessor :client_installations

    attr_accessor :component_types

    attr_accessor :enums

    attr_accessor :identity_providers

    attr_accessor :memory_info

    attr_accessor :password_policies

    attr_accessor :profile_info

    attr_accessor :protocol_mapper_types

    attr_accessor :providers

    attr_accessor :social_providers

    attr_accessor :system_info

    attr_accessor :themes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'builtin_protocol_mappers' => :'builtinProtocolMappers',
        :'client_importers' => :'clientImporters',
        :'client_installations' => :'clientInstallations',
        :'component_types' => :'componentTypes',
        :'enums' => :'enums',
        :'identity_providers' => :'identityProviders',
        :'memory_info' => :'memoryInfo',
        :'password_policies' => :'passwordPolicies',
        :'profile_info' => :'profileInfo',
        :'protocol_mapper_types' => :'protocolMapperTypes',
        :'providers' => :'providers',
        :'social_providers' => :'socialProviders',
        :'system_info' => :'systemInfo',
        :'themes' => :'themes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'builtin_protocol_mappers' => :'Hash<String, Object>',
        :'client_importers' => :'Array<Hash<String, Object>>',
        :'client_installations' => :'Hash<String, Object>',
        :'component_types' => :'Hash<String, Object>',
        :'enums' => :'Hash<String, Object>',
        :'identity_providers' => :'Array<Hash<String, Object>>',
        :'memory_info' => :'MemoryInfoRepresentation',
        :'password_policies' => :'Array<PasswordPolicyTypeRepresentation>',
        :'profile_info' => :'ProfileInfoRepresentation',
        :'protocol_mapper_types' => :'Hash<String, Object>',
        :'providers' => :'Hash<String, Object>',
        :'social_providers' => :'Array<Hash<String, Object>>',
        :'system_info' => :'SystemInfoRepresentation',
        :'themes' => :'Hash<String, Object>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakRest::ServerInfoRepresentation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakRest::ServerInfoRepresentation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'builtin_protocol_mappers')
        if (value = attributes[:'builtin_protocol_mappers']).is_a?(Hash)
          self.builtin_protocol_mappers = value
        end
      end

      if attributes.key?(:'client_importers')
        if (value = attributes[:'client_importers']).is_a?(Array)
          self.client_importers = value
        end
      end

      if attributes.key?(:'client_installations')
        if (value = attributes[:'client_installations']).is_a?(Hash)
          self.client_installations = value
        end
      end

      if attributes.key?(:'component_types')
        if (value = attributes[:'component_types']).is_a?(Hash)
          self.component_types = value
        end
      end

      if attributes.key?(:'enums')
        if (value = attributes[:'enums']).is_a?(Hash)
          self.enums = value
        end
      end

      if attributes.key?(:'identity_providers')
        if (value = attributes[:'identity_providers']).is_a?(Array)
          self.identity_providers = value
        end
      end

      if attributes.key?(:'memory_info')
        self.memory_info = attributes[:'memory_info']
      end

      if attributes.key?(:'password_policies')
        if (value = attributes[:'password_policies']).is_a?(Array)
          self.password_policies = value
        end
      end

      if attributes.key?(:'profile_info')
        self.profile_info = attributes[:'profile_info']
      end

      if attributes.key?(:'protocol_mapper_types')
        if (value = attributes[:'protocol_mapper_types']).is_a?(Hash)
          self.protocol_mapper_types = value
        end
      end

      if attributes.key?(:'providers')
        if (value = attributes[:'providers']).is_a?(Hash)
          self.providers = value
        end
      end

      if attributes.key?(:'social_providers')
        if (value = attributes[:'social_providers']).is_a?(Array)
          self.social_providers = value
        end
      end

      if attributes.key?(:'system_info')
        self.system_info = attributes[:'system_info']
      end

      if attributes.key?(:'themes')
        if (value = attributes[:'themes']).is_a?(Hash)
          self.themes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          builtin_protocol_mappers == o.builtin_protocol_mappers &&
          client_importers == o.client_importers &&
          client_installations == o.client_installations &&
          component_types == o.component_types &&
          enums == o.enums &&
          identity_providers == o.identity_providers &&
          memory_info == o.memory_info &&
          password_policies == o.password_policies &&
          profile_info == o.profile_info &&
          protocol_mapper_types == o.protocol_mapper_types &&
          providers == o.providers &&
          social_providers == o.social_providers &&
          system_info == o.system_info &&
          themes == o.themes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [builtin_protocol_mappers, client_importers, client_installations, component_types, enums, identity_providers, memory_info, password_policies, profile_info, protocol_mapper_types, providers, social_providers, system_info, themes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakRest.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
