=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakRest
  class AccessToken
    attr_accessor :acr

    attr_accessor :address

    attr_accessor :allowed_origins

    attr_accessor :at_hash

    attr_accessor :auth_time

    attr_accessor :authorization

    attr_accessor :azp

    attr_accessor :birthdate

    attr_accessor :c_hash

    attr_accessor :category

    attr_accessor :claims_locales

    attr_accessor :cnf

    attr_accessor :email

    attr_accessor :email_verified

    attr_accessor :exp

    attr_accessor :family_name

    attr_accessor :gender

    attr_accessor :given_name

    attr_accessor :iat

    attr_accessor :iss

    attr_accessor :jti

    attr_accessor :locale

    attr_accessor :middle_name

    attr_accessor :name

    attr_accessor :nbf

    attr_accessor :nickname

    attr_accessor :nonce

    attr_accessor :other_claims

    attr_accessor :phone_number

    attr_accessor :phone_number_verified

    attr_accessor :picture

    attr_accessor :preferred_username

    attr_accessor :profile

    attr_accessor :realm_access

    attr_accessor :s_hash

    attr_accessor :scope

    attr_accessor :session_state

    attr_accessor :sub

    attr_accessor :trusted_certs

    attr_accessor :typ

    attr_accessor :updated_at

    attr_accessor :website

    attr_accessor :zoneinfo

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'acr' => :'acr',
        :'address' => :'address',
        :'allowed_origins' => :'allowed-origins',
        :'at_hash' => :'at_hash',
        :'auth_time' => :'auth_time',
        :'authorization' => :'authorization',
        :'azp' => :'azp',
        :'birthdate' => :'birthdate',
        :'c_hash' => :'c_hash',
        :'category' => :'category',
        :'claims_locales' => :'claims_locales',
        :'cnf' => :'cnf',
        :'email' => :'email',
        :'email_verified' => :'email_verified',
        :'exp' => :'exp',
        :'family_name' => :'family_name',
        :'gender' => :'gender',
        :'given_name' => :'given_name',
        :'iat' => :'iat',
        :'iss' => :'iss',
        :'jti' => :'jti',
        :'locale' => :'locale',
        :'middle_name' => :'middle_name',
        :'name' => :'name',
        :'nbf' => :'nbf',
        :'nickname' => :'nickname',
        :'nonce' => :'nonce',
        :'other_claims' => :'otherClaims',
        :'phone_number' => :'phone_number',
        :'phone_number_verified' => :'phone_number_verified',
        :'picture' => :'picture',
        :'preferred_username' => :'preferred_username',
        :'profile' => :'profile',
        :'realm_access' => :'realm_access',
        :'s_hash' => :'s_hash',
        :'scope' => :'scope',
        :'session_state' => :'session_state',
        :'sub' => :'sub',
        :'trusted_certs' => :'trusted-certs',
        :'typ' => :'typ',
        :'updated_at' => :'updated_at',
        :'website' => :'website',
        :'zoneinfo' => :'zoneinfo'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'acr' => :'String',
        :'address' => :'AddressClaimSet',
        :'allowed_origins' => :'Array<String>',
        :'at_hash' => :'String',
        :'auth_time' => :'Integer',
        :'authorization' => :'AccessTokenAuthorization',
        :'azp' => :'String',
        :'birthdate' => :'String',
        :'c_hash' => :'String',
        :'category' => :'String',
        :'claims_locales' => :'String',
        :'cnf' => :'AccessTokenCertConf',
        :'email' => :'String',
        :'email_verified' => :'Boolean',
        :'exp' => :'Integer',
        :'family_name' => :'String',
        :'gender' => :'String',
        :'given_name' => :'String',
        :'iat' => :'Integer',
        :'iss' => :'String',
        :'jti' => :'String',
        :'locale' => :'String',
        :'middle_name' => :'String',
        :'name' => :'String',
        :'nbf' => :'Integer',
        :'nickname' => :'String',
        :'nonce' => :'String',
        :'other_claims' => :'Hash<String, Object>',
        :'phone_number' => :'String',
        :'phone_number_verified' => :'Boolean',
        :'picture' => :'String',
        :'preferred_username' => :'String',
        :'profile' => :'String',
        :'realm_access' => :'AccessTokenAccess',
        :'s_hash' => :'String',
        :'scope' => :'String',
        :'session_state' => :'String',
        :'sub' => :'String',
        :'trusted_certs' => :'Array<String>',
        :'typ' => :'String',
        :'updated_at' => :'Integer',
        :'website' => :'String',
        :'zoneinfo' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakRest::AccessToken` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakRest::AccessToken`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'acr')
        self.acr = attributes[:'acr']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'allowed_origins')
        if (value = attributes[:'allowed_origins']).is_a?(Array)
          self.allowed_origins = value
        end
      end

      if attributes.key?(:'at_hash')
        self.at_hash = attributes[:'at_hash']
      end

      if attributes.key?(:'auth_time')
        self.auth_time = attributes[:'auth_time']
      end

      if attributes.key?(:'authorization')
        self.authorization = attributes[:'authorization']
      end

      if attributes.key?(:'azp')
        self.azp = attributes[:'azp']
      end

      if attributes.key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end

      if attributes.key?(:'c_hash')
        self.c_hash = attributes[:'c_hash']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'claims_locales')
        self.claims_locales = attributes[:'claims_locales']
      end

      if attributes.key?(:'cnf')
        self.cnf = attributes[:'cnf']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'email_verified')
        self.email_verified = attributes[:'email_verified']
      end

      if attributes.key?(:'exp')
        self.exp = attributes[:'exp']
      end

      if attributes.key?(:'family_name')
        self.family_name = attributes[:'family_name']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'given_name')
        self.given_name = attributes[:'given_name']
      end

      if attributes.key?(:'iat')
        self.iat = attributes[:'iat']
      end

      if attributes.key?(:'iss')
        self.iss = attributes[:'iss']
      end

      if attributes.key?(:'jti')
        self.jti = attributes[:'jti']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'nbf')
        self.nbf = attributes[:'nbf']
      end

      if attributes.key?(:'nickname')
        self.nickname = attributes[:'nickname']
      end

      if attributes.key?(:'nonce')
        self.nonce = attributes[:'nonce']
      end

      if attributes.key?(:'other_claims')
        if (value = attributes[:'other_claims']).is_a?(Hash)
          self.other_claims = value
        end
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'phone_number_verified')
        self.phone_number_verified = attributes[:'phone_number_verified']
      end

      if attributes.key?(:'picture')
        self.picture = attributes[:'picture']
      end

      if attributes.key?(:'preferred_username')
        self.preferred_username = attributes[:'preferred_username']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.key?(:'realm_access')
        self.realm_access = attributes[:'realm_access']
      end

      if attributes.key?(:'s_hash')
        self.s_hash = attributes[:'s_hash']
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.key?(:'session_state')
        self.session_state = attributes[:'session_state']
      end

      if attributes.key?(:'sub')
        self.sub = attributes[:'sub']
      end

      if attributes.key?(:'trusted_certs')
        if (value = attributes[:'trusted_certs']).is_a?(Array)
          self.trusted_certs = value
        end
      end

      if attributes.key?(:'typ')
        self.typ = attributes[:'typ']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'zoneinfo')
        self.zoneinfo = attributes[:'zoneinfo']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      category_validator = EnumAttributeValidator.new('String', ["INTERNAL", "ACCESS", "ID", "ADMIN", "USERINFO"])
      return false unless category_validator.valid?(@category)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ["INTERNAL", "ACCESS", "ID", "ADMIN", "USERINFO"])
      unless validator.valid?(category)
        fail ArgumentError, "invalid value for \"category\", must be one of #{validator.allowable_values}."
      end
      @category = category
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          acr == o.acr &&
          address == o.address &&
          allowed_origins == o.allowed_origins &&
          at_hash == o.at_hash &&
          auth_time == o.auth_time &&
          authorization == o.authorization &&
          azp == o.azp &&
          birthdate == o.birthdate &&
          c_hash == o.c_hash &&
          category == o.category &&
          claims_locales == o.claims_locales &&
          cnf == o.cnf &&
          email == o.email &&
          email_verified == o.email_verified &&
          exp == o.exp &&
          family_name == o.family_name &&
          gender == o.gender &&
          given_name == o.given_name &&
          iat == o.iat &&
          iss == o.iss &&
          jti == o.jti &&
          locale == o.locale &&
          middle_name == o.middle_name &&
          name == o.name &&
          nbf == o.nbf &&
          nickname == o.nickname &&
          nonce == o.nonce &&
          other_claims == o.other_claims &&
          phone_number == o.phone_number &&
          phone_number_verified == o.phone_number_verified &&
          picture == o.picture &&
          preferred_username == o.preferred_username &&
          profile == o.profile &&
          realm_access == o.realm_access &&
          s_hash == o.s_hash &&
          scope == o.scope &&
          session_state == o.session_state &&
          sub == o.sub &&
          trusted_certs == o.trusted_certs &&
          typ == o.typ &&
          updated_at == o.updated_at &&
          website == o.website &&
          zoneinfo == o.zoneinfo
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [acr, address, allowed_origins, at_hash, auth_time, authorization, azp, birthdate, c_hash, category, claims_locales, cnf, email, email_verified, exp, family_name, gender, given_name, iat, iss, jti, locale, middle_name, name, nbf, nickname, nonce, other_claims, phone_number, phone_number_verified, picture, preferred_username, profile, realm_access, s_hash, scope, session_state, sub, trusted_certs, typ, updated_at, website, zoneinfo].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakRest.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
