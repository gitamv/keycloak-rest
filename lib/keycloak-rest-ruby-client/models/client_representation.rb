=begin
#Keycloak Admin REST API

#This is a REST API reference for the Keycloak Admin

The version of the OpenAPI document: 1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'date'

module KeycloakRest
  class ClientRepresentation
    attr_accessor :access

    attr_accessor :admin_url

    attr_accessor :always_display_in_console

    attr_accessor :attributes

    attr_accessor :authentication_flow_binding_overrides

    attr_accessor :authorization_services_enabled

    attr_accessor :authorization_settings

    attr_accessor :base_url

    attr_accessor :bearer_only

    attr_accessor :client_authenticator_type

    attr_accessor :client_id

    attr_accessor :consent_required

    attr_accessor :default_client_scopes

    attr_accessor :default_roles

    attr_accessor :description

    attr_accessor :direct_access_grants_enabled

    attr_accessor :enabled

    attr_accessor :frontchannel_logout

    attr_accessor :full_scope_allowed

    attr_accessor :id

    attr_accessor :implicit_flow_enabled

    attr_accessor :name

    attr_accessor :node_re_registration_timeout

    attr_accessor :not_before

    attr_accessor :optional_client_scopes

    attr_accessor :origin

    attr_accessor :protocol

    attr_accessor :protocol_mappers

    attr_accessor :public_client

    attr_accessor :redirect_uris

    attr_accessor :registered_nodes

    attr_accessor :registration_access_token

    attr_accessor :root_url

    attr_accessor :secret

    attr_accessor :service_accounts_enabled

    attr_accessor :standard_flow_enabled

    attr_accessor :surrogate_auth_required

    attr_accessor :web_origins

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access' => :'access',
        :'admin_url' => :'adminUrl',
        :'always_display_in_console' => :'alwaysDisplayInConsole',
        :'attributes' => :'attributes',
        :'authentication_flow_binding_overrides' => :'authenticationFlowBindingOverrides',
        :'authorization_services_enabled' => :'authorizationServicesEnabled',
        :'authorization_settings' => :'authorizationSettings',
        :'base_url' => :'baseUrl',
        :'bearer_only' => :'bearerOnly',
        :'client_authenticator_type' => :'clientAuthenticatorType',
        :'client_id' => :'clientId',
        :'consent_required' => :'consentRequired',
        :'default_client_scopes' => :'defaultClientScopes',
        :'default_roles' => :'defaultRoles',
        :'description' => :'description',
        :'direct_access_grants_enabled' => :'directAccessGrantsEnabled',
        :'enabled' => :'enabled',
        :'frontchannel_logout' => :'frontchannelLogout',
        :'full_scope_allowed' => :'fullScopeAllowed',
        :'id' => :'id',
        :'implicit_flow_enabled' => :'implicitFlowEnabled',
        :'name' => :'name',
        :'node_re_registration_timeout' => :'nodeReRegistrationTimeout',
        :'not_before' => :'notBefore',
        :'optional_client_scopes' => :'optionalClientScopes',
        :'origin' => :'origin',
        :'protocol' => :'protocol',
        :'protocol_mappers' => :'protocolMappers',
        :'public_client' => :'publicClient',
        :'redirect_uris' => :'redirectUris',
        :'registered_nodes' => :'registeredNodes',
        :'registration_access_token' => :'registrationAccessToken',
        :'root_url' => :'rootUrl',
        :'secret' => :'secret',
        :'service_accounts_enabled' => :'serviceAccountsEnabled',
        :'standard_flow_enabled' => :'standardFlowEnabled',
        :'surrogate_auth_required' => :'surrogateAuthRequired',
        :'web_origins' => :'webOrigins'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access' => :'Hash<String, Object>',
        :'admin_url' => :'String',
        :'always_display_in_console' => :'Boolean',
        :'attributes' => :'Hash<String, Object>',
        :'authentication_flow_binding_overrides' => :'Hash<String, Object>',
        :'authorization_services_enabled' => :'Boolean',
        :'authorization_settings' => :'ResourceServerRepresentation',
        :'base_url' => :'String',
        :'bearer_only' => :'Boolean',
        :'client_authenticator_type' => :'String',
        :'client_id' => :'String',
        :'consent_required' => :'Boolean',
        :'default_client_scopes' => :'Array<String>',
        :'default_roles' => :'Array<String>',
        :'description' => :'String',
        :'direct_access_grants_enabled' => :'Boolean',
        :'enabled' => :'Boolean',
        :'frontchannel_logout' => :'Boolean',
        :'full_scope_allowed' => :'Boolean',
        :'id' => :'String',
        :'implicit_flow_enabled' => :'Boolean',
        :'name' => :'String',
        :'node_re_registration_timeout' => :'Integer',
        :'not_before' => :'Integer',
        :'optional_client_scopes' => :'Array<String>',
        :'origin' => :'String',
        :'protocol' => :'String',
        :'protocol_mappers' => :'Array<ProtocolMapperRepresentation>',
        :'public_client' => :'Boolean',
        :'redirect_uris' => :'Array<String>',
        :'registered_nodes' => :'Hash<String, Object>',
        :'registration_access_token' => :'String',
        :'root_url' => :'String',
        :'secret' => :'String',
        :'service_accounts_enabled' => :'Boolean',
        :'standard_flow_enabled' => :'Boolean',
        :'surrogate_auth_required' => :'Boolean',
        :'web_origins' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KeycloakRest::ClientRepresentation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KeycloakRest::ClientRepresentation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access')
        if (value = attributes[:'access']).is_a?(Hash)
          self.access = value
        end
      end

      if attributes.key?(:'admin_url')
        self.admin_url = attributes[:'admin_url']
      end

      if attributes.key?(:'always_display_in_console')
        self.always_display_in_console = attributes[:'always_display_in_console']
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Hash)
          self.attributes = value
        end
      end

      if attributes.key?(:'authentication_flow_binding_overrides')
        if (value = attributes[:'authentication_flow_binding_overrides']).is_a?(Hash)
          self.authentication_flow_binding_overrides = value
        end
      end

      if attributes.key?(:'authorization_services_enabled')
        self.authorization_services_enabled = attributes[:'authorization_services_enabled']
      end

      if attributes.key?(:'authorization_settings')
        self.authorization_settings = attributes[:'authorization_settings']
      end

      if attributes.key?(:'base_url')
        self.base_url = attributes[:'base_url']
      end

      if attributes.key?(:'bearer_only')
        self.bearer_only = attributes[:'bearer_only']
      end

      if attributes.key?(:'client_authenticator_type')
        self.client_authenticator_type = attributes[:'client_authenticator_type']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'consent_required')
        self.consent_required = attributes[:'consent_required']
      end

      if attributes.key?(:'default_client_scopes')
        if (value = attributes[:'default_client_scopes']).is_a?(Array)
          self.default_client_scopes = value
        end
      end

      if attributes.key?(:'default_roles')
        if (value = attributes[:'default_roles']).is_a?(Array)
          self.default_roles = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'direct_access_grants_enabled')
        self.direct_access_grants_enabled = attributes[:'direct_access_grants_enabled']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end

      if attributes.key?(:'frontchannel_logout')
        self.frontchannel_logout = attributes[:'frontchannel_logout']
      end

      if attributes.key?(:'full_scope_allowed')
        self.full_scope_allowed = attributes[:'full_scope_allowed']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'implicit_flow_enabled')
        self.implicit_flow_enabled = attributes[:'implicit_flow_enabled']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'node_re_registration_timeout')
        self.node_re_registration_timeout = attributes[:'node_re_registration_timeout']
      end

      if attributes.key?(:'not_before')
        self.not_before = attributes[:'not_before']
      end

      if attributes.key?(:'optional_client_scopes')
        if (value = attributes[:'optional_client_scopes']).is_a?(Array)
          self.optional_client_scopes = value
        end
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'protocol')
        self.protocol = attributes[:'protocol']
      end

      if attributes.key?(:'protocol_mappers')
        if (value = attributes[:'protocol_mappers']).is_a?(Array)
          self.protocol_mappers = value
        end
      end

      if attributes.key?(:'public_client')
        self.public_client = attributes[:'public_client']
      end

      if attributes.key?(:'redirect_uris')
        if (value = attributes[:'redirect_uris']).is_a?(Array)
          self.redirect_uris = value
        end
      end

      if attributes.key?(:'registered_nodes')
        if (value = attributes[:'registered_nodes']).is_a?(Hash)
          self.registered_nodes = value
        end
      end

      if attributes.key?(:'registration_access_token')
        self.registration_access_token = attributes[:'registration_access_token']
      end

      if attributes.key?(:'root_url')
        self.root_url = attributes[:'root_url']
      end

      if attributes.key?(:'secret')
        self.secret = attributes[:'secret']
      end

      if attributes.key?(:'service_accounts_enabled')
        self.service_accounts_enabled = attributes[:'service_accounts_enabled']
      end

      if attributes.key?(:'standard_flow_enabled')
        self.standard_flow_enabled = attributes[:'standard_flow_enabled']
      end

      if attributes.key?(:'surrogate_auth_required')
        self.surrogate_auth_required = attributes[:'surrogate_auth_required']
      end

      if attributes.key?(:'web_origins')
        if (value = attributes[:'web_origins']).is_a?(Array)
          self.web_origins = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access == o.access &&
          admin_url == o.admin_url &&
          always_display_in_console == o.always_display_in_console &&
          attributes == o.attributes &&
          authentication_flow_binding_overrides == o.authentication_flow_binding_overrides &&
          authorization_services_enabled == o.authorization_services_enabled &&
          authorization_settings == o.authorization_settings &&
          base_url == o.base_url &&
          bearer_only == o.bearer_only &&
          client_authenticator_type == o.client_authenticator_type &&
          client_id == o.client_id &&
          consent_required == o.consent_required &&
          default_client_scopes == o.default_client_scopes &&
          default_roles == o.default_roles &&
          description == o.description &&
          direct_access_grants_enabled == o.direct_access_grants_enabled &&
          enabled == o.enabled &&
          frontchannel_logout == o.frontchannel_logout &&
          full_scope_allowed == o.full_scope_allowed &&
          id == o.id &&
          implicit_flow_enabled == o.implicit_flow_enabled &&
          name == o.name &&
          node_re_registration_timeout == o.node_re_registration_timeout &&
          not_before == o.not_before &&
          optional_client_scopes == o.optional_client_scopes &&
          origin == o.origin &&
          protocol == o.protocol &&
          protocol_mappers == o.protocol_mappers &&
          public_client == o.public_client &&
          redirect_uris == o.redirect_uris &&
          registered_nodes == o.registered_nodes &&
          registration_access_token == o.registration_access_token &&
          root_url == o.root_url &&
          secret == o.secret &&
          service_accounts_enabled == o.service_accounts_enabled &&
          standard_flow_enabled == o.standard_flow_enabled &&
          surrogate_auth_required == o.surrogate_auth_required &&
          web_origins == o.web_origins
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access, admin_url, always_display_in_console, attributes, authentication_flow_binding_overrides, authorization_services_enabled, authorization_settings, base_url, bearer_only, client_authenticator_type, client_id, consent_required, default_client_scopes, default_roles, description, direct_access_grants_enabled, enabled, frontchannel_logout, full_scope_allowed, id, implicit_flow_enabled, name, node_re_registration_timeout, not_before, optional_client_scopes, origin, protocol, protocol_mappers, public_client, redirect_uris, registered_nodes, registration_access_token, root_url, secret, service_accounts_enabled, standard_flow_enabled, surrogate_auth_required, web_origins].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        KeycloakRest.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
